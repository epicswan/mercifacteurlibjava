/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.SendCourrierAnonymize;
import io.swagger.client.model.SourcePublipostageSource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublipostageApi {
    private ApiClient apiClient;

    public PublipostageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublipostageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for sendPublipostage
     * @param idEnvoi  (required)
     * @param idExp  (required)
     * @param jsonExp  (required)
     * @param modeEnvoi  (required)
     * @param anonymize  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendPublipostageCall(Integer idEnvoi, Integer idExp, String jsonExp, String modeEnvoi, SendCourrierAnonymize anonymize, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sendPublipostage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (idEnvoi != null)
        localVarFormParams.put("idEnvoi", idEnvoi);
        if (idExp != null)
        localVarFormParams.put("idExp", idExp);
        if (jsonExp != null)
        localVarFormParams.put("jsonExp", jsonExp);
        if (modeEnvoi != null)
        localVarFormParams.put("modeEnvoi", modeEnvoi);
        if (anonymize != null)
        localVarFormParams.put("anonymize", anonymize);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendPublipostageValidateBeforeCall(Integer idEnvoi, Integer idExp, String jsonExp, String modeEnvoi, SendCourrierAnonymize anonymize, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'idEnvoi' is set
        if (idEnvoi == null) {
            throw new ApiException("Missing the required parameter 'idEnvoi' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'idExp' is set
        if (idExp == null) {
            throw new ApiException("Missing the required parameter 'idExp' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'jsonExp' is set
        if (jsonExp == null) {
            throw new ApiException("Missing the required parameter 'jsonExp' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'modeEnvoi' is set
        if (modeEnvoi == null) {
            throw new ApiException("Missing the required parameter 'modeEnvoi' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'anonymize' is set
        if (anonymize == null) {
            throw new ApiException("Missing the required parameter 'anonymize' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling sendPublipostage(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling sendPublipostage(Async)");
        }
        
        com.squareup.okhttp.Call call = sendPublipostageCall(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Envoi de la source de données du publipostage
     * Validation de l&#x27;envoi d&#x27;un publipostage. Cela enclenche la fusion des données, la mise en production, l&#x27;impression et l&#x27;envoi de l&#x27;ensemble des lettres du publipostage.
     * @param idEnvoi  (required)
     * @param idExp  (required)
     * @param jsonExp  (required)
     * @param modeEnvoi  (required)
     * @param anonymize  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 sendPublipostage(Integer idEnvoi, Integer idExp, String jsonExp, String modeEnvoi, SendCourrierAnonymize anonymize, String wwServiceId, String wwAccessToken) throws ApiException {
        ApiResponse<InlineResponse2009> resp = sendPublipostageWithHttpInfo(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken);
        return resp.getData();
    }

    /**
     * Envoi de la source de données du publipostage
     * Validation de l&#x27;envoi d&#x27;un publipostage. Cela enclenche la fusion des données, la mise en production, l&#x27;impression et l&#x27;envoi de l&#x27;ensemble des lettres du publipostage.
     * @param idEnvoi  (required)
     * @param idExp  (required)
     * @param jsonExp  (required)
     * @param modeEnvoi  (required)
     * @param anonymize  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> sendPublipostageWithHttpInfo(Integer idEnvoi, Integer idExp, String jsonExp, String modeEnvoi, SendCourrierAnonymize anonymize, String wwServiceId, String wwAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = sendPublipostageValidateBeforeCall(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Envoi de la source de données du publipostage (asynchronously)
     * Validation de l&#x27;envoi d&#x27;un publipostage. Cela enclenche la fusion des données, la mise en production, l&#x27;impression et l&#x27;envoi de l&#x27;ensemble des lettres du publipostage.
     * @param idEnvoi  (required)
     * @param idExp  (required)
     * @param jsonExp  (required)
     * @param modeEnvoi  (required)
     * @param anonymize  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendPublipostageAsync(Integer idEnvoi, Integer idExp, String jsonExp, String modeEnvoi, SendCourrierAnonymize anonymize, String wwServiceId, String wwAccessToken, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendPublipostageValidateBeforeCall(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sourcePublipostage
     * @param idUser  (required)
     * @param templateValidation  (required)
     * @param source  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sourcePublipostageCall(Integer idUser, Object templateValidation, SourcePublipostageSource source, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sourcePublipostage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (idUser != null)
        localVarFormParams.put("idUser", idUser);
        if (templateValidation != null)
        localVarFormParams.put("templateValidation", templateValidation);
        if (source != null)
        localVarFormParams.put("source", source);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sourcePublipostageValidateBeforeCall(Integer idUser, Object templateValidation, SourcePublipostageSource source, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling sourcePublipostage(Async)");
        }
        // verify the required parameter 'templateValidation' is set
        if (templateValidation == null) {
            throw new ApiException("Missing the required parameter 'templateValidation' when calling sourcePublipostage(Async)");
        }
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling sourcePublipostage(Async)");
        }
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling sourcePublipostage(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling sourcePublipostage(Async)");
        }
        
        com.squareup.okhttp.Call call = sourcePublipostageCall(idUser, templateValidation, source, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Envoi de la source de données du publipostage
     * La source de donnée contient les informations de vos destinataires. Elle peut être au format CSV/TXT (; entre les champs, et saut de ligne entre les lignes, la première ligne doit contenir les champs de fusion), ou au format json (de la forme [{\&quot;prenom\&quot;:\&quot;Jean-Marc\&quot;, \&quot;ville\&quot;:\&quot;Paris\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;},{\&quot;prenom\&quot;:\&quot;Julie\&quot;, \&quot;ville\&quot;:\&quot;Lyon\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;}]). Votre fichier source doit au minimum contenir les champs de fusion suivants : \&quot;nom\&quot; ou \&quot;societe\&quot;, \&quot;cp\&quot;, \&quot;ville\&quot;, \&quot;pays\&quot;. Dans le cas d&#x27;un fichier CSV ou TXT, la premi&amp;egrave;re ligne doit &amp;ecirc;tre : civilite;nom;prenom;societe;adresse1;adresse2;adresse3;cp;ville;pays
     * @param idUser  (required)
     * @param templateValidation  (required)
     * @param source  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 sourcePublipostage(Integer idUser, Object templateValidation, SourcePublipostageSource source, String wwServiceId, String wwAccessToken) throws ApiException {
        ApiResponse<InlineResponse20015> resp = sourcePublipostageWithHttpInfo(idUser, templateValidation, source, wwServiceId, wwAccessToken);
        return resp.getData();
    }

    /**
     * Envoi de la source de données du publipostage
     * La source de donnée contient les informations de vos destinataires. Elle peut être au format CSV/TXT (; entre les champs, et saut de ligne entre les lignes, la première ligne doit contenir les champs de fusion), ou au format json (de la forme [{\&quot;prenom\&quot;:\&quot;Jean-Marc\&quot;, \&quot;ville\&quot;:\&quot;Paris\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;},{\&quot;prenom\&quot;:\&quot;Julie\&quot;, \&quot;ville\&quot;:\&quot;Lyon\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;}]). Votre fichier source doit au minimum contenir les champs de fusion suivants : \&quot;nom\&quot; ou \&quot;societe\&quot;, \&quot;cp\&quot;, \&quot;ville\&quot;, \&quot;pays\&quot;. Dans le cas d&#x27;un fichier CSV ou TXT, la premi&amp;egrave;re ligne doit &amp;ecirc;tre : civilite;nom;prenom;societe;adresse1;adresse2;adresse3;cp;ville;pays
     * @param idUser  (required)
     * @param templateValidation  (required)
     * @param source  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> sourcePublipostageWithHttpInfo(Integer idUser, Object templateValidation, SourcePublipostageSource source, String wwServiceId, String wwAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = sourcePublipostageValidateBeforeCall(idUser, templateValidation, source, wwServiceId, wwAccessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Envoi de la source de données du publipostage (asynchronously)
     * La source de donnée contient les informations de vos destinataires. Elle peut être au format CSV/TXT (; entre les champs, et saut de ligne entre les lignes, la première ligne doit contenir les champs de fusion), ou au format json (de la forme [{\&quot;prenom\&quot;:\&quot;Jean-Marc\&quot;, \&quot;ville\&quot;:\&quot;Paris\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;},{\&quot;prenom\&quot;:\&quot;Julie\&quot;, \&quot;ville\&quot;:\&quot;Lyon\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;}]). Votre fichier source doit au minimum contenir les champs de fusion suivants : \&quot;nom\&quot; ou \&quot;societe\&quot;, \&quot;cp\&quot;, \&quot;ville\&quot;, \&quot;pays\&quot;. Dans le cas d&#x27;un fichier CSV ou TXT, la premi&amp;egrave;re ligne doit &amp;ecirc;tre : civilite;nom;prenom;societe;adresse1;adresse2;adresse3;cp;ville;pays
     * @param idUser  (required)
     * @param templateValidation  (required)
     * @param source  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sourcePublipostageAsync(Integer idUser, Object templateValidation, SourcePublipostageSource source, String wwServiceId, String wwAccessToken, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sourcePublipostageValidateBeforeCall(idUser, templateValidation, source, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for templatePublipostage
     * @param typeTemplate  (required)
     * @param template  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call templatePublipostageCall(String typeTemplate, String template, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/templatePublipostage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (typeTemplate != null)
        localVarFormParams.put("typeTemplate", typeTemplate);
        if (template != null)
        localVarFormParams.put("template", template);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call templatePublipostageValidateBeforeCall(String typeTemplate, String template, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'typeTemplate' is set
        if (typeTemplate == null) {
            throw new ApiException("Missing the required parameter 'typeTemplate' when calling templatePublipostage(Async)");
        }
        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling templatePublipostage(Async)");
        }
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling templatePublipostage(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling templatePublipostage(Async)");
        }
        
        com.squareup.okhttp.Call call = templatePublipostageCall(typeTemplate, template, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Envoi du template de la lettre à envoyer en nombre
     * Le template doit être un fichier au format DOCX, il peut contenir des zones de remplacement (ou champs de fusion) qui seront remplacés par des données contenues dans la source de données. Les champs de fusion dans le template doivent être de la forme ${prenom} (avec uniquement des lettres, chiffres et le caractère _).
     * @param typeTemplate  (required)
     * @param template  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 templatePublipostage(String typeTemplate, String template, String wwServiceId, String wwAccessToken) throws ApiException {
        ApiResponse<InlineResponse20014> resp = templatePublipostageWithHttpInfo(typeTemplate, template, wwServiceId, wwAccessToken);
        return resp.getData();
    }

    /**
     * Envoi du template de la lettre à envoyer en nombre
     * Le template doit être un fichier au format DOCX, il peut contenir des zones de remplacement (ou champs de fusion) qui seront remplacés par des données contenues dans la source de données. Les champs de fusion dans le template doivent être de la forme ${prenom} (avec uniquement des lettres, chiffres et le caractère _).
     * @param typeTemplate  (required)
     * @param template  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> templatePublipostageWithHttpInfo(String typeTemplate, String template, String wwServiceId, String wwAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = templatePublipostageValidateBeforeCall(typeTemplate, template, wwServiceId, wwAccessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Envoi du template de la lettre à envoyer en nombre (asynchronously)
     * Le template doit être un fichier au format DOCX, il peut contenir des zones de remplacement (ou champs de fusion) qui seront remplacés par des données contenues dans la source de données. Les champs de fusion dans le template doivent être de la forme ${prenom} (avec uniquement des lettres, chiffres et le caractère _).
     * @param typeTemplate  (required)
     * @param template  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call templatePublipostageAsync(String typeTemplate, String template, String wwServiceId, String wwAccessToken, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = templatePublipostageValidateBeforeCall(typeTemplate, template, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
