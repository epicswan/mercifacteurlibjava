/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AdressSendCourrier;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.SendCourrierAnonymize;
import io.swagger.client.model.SendCourrierContent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CourrierApi {
    private ApiClient apiClient;

    public CourrierApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CourrierApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteEnvoi
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEnvoiCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deleteEnvoi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idEnvoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idEnvoi", idEnvoi));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEnvoiValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling deleteEnvoi(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling deleteEnvoi(Async)");
        }
        // verify the required parameter 'idEnvoi' is set
        if (idEnvoi == null) {
            throw new ApiException("Missing the required parameter 'idEnvoi' when calling deleteEnvoi(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEnvoiCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Annuler un envoi et son contenu
     * Attention, opération irrémédiable. Selon le statut actuel des courriers, une demande d&#x27;annulation d&#x27;envoi pourra être rejetée immédiatement, rejetée après un certain délai, rejetée partiellement (annulation de l&#x27;envoi mais facturation partiellement annulée), ou acceptée intégralement (annulation de l&#x27;envoi et annulation intégrale de la facturation de cet envoi).
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 deleteEnvoi(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        ApiResponse<InlineResponse2002> resp = deleteEnvoiWithHttpInfo(wwServiceId, wwAccessToken, idEnvoi);
        return resp.getData();
    }

    /**
     * Annuler un envoi et son contenu
     * Attention, opération irrémédiable. Selon le statut actuel des courriers, une demande d&#x27;annulation d&#x27;envoi pourra être rejetée immédiatement, rejetée après un certain délai, rejetée partiellement (annulation de l&#x27;envoi mais facturation partiellement annulée), ou acceptée intégralement (annulation de l&#x27;envoi et annulation intégrale de la facturation de cet envoi).
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> deleteEnvoiWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        com.squareup.okhttp.Call call = deleteEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuler un envoi et son contenu (asynchronously)
     * Attention, opération irrémédiable. Selon le statut actuel des courriers, une demande d&#x27;annulation d&#x27;envoi pourra être rejetée immédiatement, rejetée après un certain délai, rejetée partiellement (annulation de l&#x27;envoi mais facturation partiellement annulée), ou acceptée intégralement (annulation de l&#x27;envoi et annulation intégrale de la facturation de cet envoi).
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi contenant les courriers à annuler (Id retourné par /sendCourrier) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEnvoiAsync(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvoi
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnvoiCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getEnvoi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idEnvoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idEnvoi", idEnvoi));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnvoiValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getEnvoi(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getEnvoi(Async)");
        }
        // verify the required parameter 'idEnvoi' is set
        if (idEnvoi == null) {
            throw new ApiException("Missing the required parameter 'idEnvoi' when calling getEnvoi(Async)");
        }
        
        com.squareup.okhttp.Call call = getEnvoiCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lister les courriers d&#x27;un envoi en particulier
     * Cette opération entre dans le détail des informations d&#x27;un envoi précis. Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 getEnvoi(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        ApiResponse<InlineResponse20012> resp = getEnvoiWithHttpInfo(wwServiceId, wwAccessToken, idEnvoi);
        return resp.getData();
    }

    /**
     * Lister les courriers d&#x27;un envoi en particulier
     * Cette opération entre dans le détail des informations d&#x27;un envoi précis. Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> getEnvoiWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        com.squareup.okhttp.Call call = getEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lister les courriers d&#x27;un envoi en particulier (asynchronously)
     * Cette opération entre dans le détail des informations d&#x27;un envoi précis. Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire les détails. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnvoiAsync(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastEvents
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param nbHeures Compris entre 1 et 48, délai en nombre d&#x27;heures pour définir la plage sur laquelle vous souhaitez extraire les derniers évènements. (required)
     * @param page Si non spécifié, sera par défaut à 1. Si vous avez plus de 100 évènements sur la plage horaire définie, les résultats seront paginés. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastEventsCall(String wwServiceId, String wwAccessToken, Integer nbHeures, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getLastEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nbHeures != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nbHeures", nbHeures));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastEventsValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer nbHeures, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getLastEvents(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getLastEvents(Async)");
        }
        // verify the required parameter 'nbHeures' is set
        if (nbHeures == null) {
            throw new ApiException("Missing the required parameter 'nbHeures' when calling getLastEvents(Async)");
        }
        
        com.squareup.okhttp.Call call = getLastEventsCall(wwServiceId, wwAccessToken, nbHeures, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lister les derniers évènements sur vos courriers
     * Cette opération vous fourni l&#x27;historique des derniers évènements qui ont été executés en relation avec vos courriers. Si vous avez plus de 100 évènements sur la période, le résultat sera paginé.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param nbHeures Compris entre 1 et 48, délai en nombre d&#x27;heures pour définir la plage sur laquelle vous souhaitez extraire les derniers évènements. (required)
     * @param page Si non spécifié, sera par défaut à 1. Si vous avez plus de 100 évènements sur la plage horaire définie, les résultats seront paginés. (optional)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 getLastEvents(String wwServiceId, String wwAccessToken, Integer nbHeures, Integer page) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getLastEventsWithHttpInfo(wwServiceId, wwAccessToken, nbHeures, page);
        return resp.getData();
    }

    /**
     * Lister les derniers évènements sur vos courriers
     * Cette opération vous fourni l&#x27;historique des derniers évènements qui ont été executés en relation avec vos courriers. Si vous avez plus de 100 évènements sur la période, le résultat sera paginé.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param nbHeures Compris entre 1 et 48, délai en nombre d&#x27;heures pour définir la plage sur laquelle vous souhaitez extraire les derniers évènements. (required)
     * @param page Si non spécifié, sera par défaut à 1. Si vous avez plus de 100 évènements sur la plage horaire définie, les résultats seront paginés. (optional)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> getLastEventsWithHttpInfo(String wwServiceId, String wwAccessToken, Integer nbHeures, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getLastEventsValidateBeforeCall(wwServiceId, wwAccessToken, nbHeures, page, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lister les derniers évènements sur vos courriers (asynchronously)
     * Cette opération vous fourni l&#x27;historique des derniers évènements qui ont été executés en relation avec vos courriers. Si vous avez plus de 100 évènements sur la période, le résultat sera paginé.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param nbHeures Compris entre 1 et 48, délai en nombre d&#x27;heures pour définir la plage sur laquelle vous souhaitez extraire les derniers évènements. (required)
     * @param page Si non spécifié, sera par défaut à 1. Si vous avez plus de 100 évènements sur la plage horaire définie, les résultats seront paginés. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastEventsAsync(String wwServiceId, String wwAccessToken, Integer nbHeures, Integer page, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastEventsValidateBeforeCall(wwServiceId, wwAccessToken, nbHeures, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPostagePrice
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param modeEnvoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param cardFormat Format de la carte (laisser vide si pas de carte) (required)
     * @param cardPapier Papier de la carte (laisser vide si pas de carte) (required)
     * @param cardCoin Coins de la carte (laisser vide si pas de carte) (required)
     * @param letterPageNumber Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param photoNumber Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param paysDestinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param idDestinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param letterPrintSides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPostagePriceCall(String wwServiceId, String wwAccessToken, List<String> modeEnvoi, List<String> cardFormat, List<String> cardPapier, List<String> cardCoin, Integer letterPageNumber, Integer photoNumber, List<String> paysDestinataire, List<Integer> idDestinataire, String letterPrintSides, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getPostagePrice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modeEnvoi != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modeEnvoi", modeEnvoi));
        if (paysDestinataire != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "paysDestinataire[]", paysDestinataire));
        if (idDestinataire != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "idDestinataire[]", idDestinataire));
        if (cardFormat != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cardFormat", cardFormat));
        if (cardPapier != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cardPapier", cardPapier));
        if (cardCoin != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "cardCoin", cardCoin));
        if (letterPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("letterPageNumber", letterPageNumber));
        if (letterPrintSides != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("letterPrintSides", letterPrintSides));
        if (photoNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("photoNumber", photoNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPostagePriceValidateBeforeCall(String wwServiceId, String wwAccessToken, List<String> modeEnvoi, List<String> cardFormat, List<String> cardPapier, List<String> cardCoin, Integer letterPageNumber, Integer photoNumber, List<String> paysDestinataire, List<Integer> idDestinataire, String letterPrintSides, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'modeEnvoi' is set
        if (modeEnvoi == null) {
            throw new ApiException("Missing the required parameter 'modeEnvoi' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'cardFormat' is set
        if (cardFormat == null) {
            throw new ApiException("Missing the required parameter 'cardFormat' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'cardPapier' is set
        if (cardPapier == null) {
            throw new ApiException("Missing the required parameter 'cardPapier' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'cardCoin' is set
        if (cardCoin == null) {
            throw new ApiException("Missing the required parameter 'cardCoin' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'letterPageNumber' is set
        if (letterPageNumber == null) {
            throw new ApiException("Missing the required parameter 'letterPageNumber' when calling getPostagePrice(Async)");
        }
        // verify the required parameter 'photoNumber' is set
        if (photoNumber == null) {
            throw new ApiException("Missing the required parameter 'photoNumber' when calling getPostagePrice(Async)");
        }
        
        com.squareup.okhttp.Call call = getPostagePriceCall(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, paysDestinataire, idDestinataire, letterPrintSides, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtenir le montant d&#x27;un ou plusieurs courriers (non nécessaire à l&#x27;envoi)
     * Vous permet d&#x27;avoir le montant de l&#x27;affranchissement et du contenu d&#x27;un courrier en fonction de son contenu, de son mode d&#x27;envoi et de sa destination. Vous n&#x27;avez pas besoin d&#x27;utiliser cette fonction pour envoyer un courrier, mais vous pouvez l&#x27;utiliser si vous avez besoin de cette information avant d&#x27;envoyer un courrier (par exemple pour des raisons de facturation). Le montant retourné est un montant HT. La partie \&quot;affranchissement\&quot; n&#x27;est pas soumise à la TVA.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param modeEnvoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param cardFormat Format de la carte (laisser vide si pas de carte) (required)
     * @param cardPapier Papier de la carte (laisser vide si pas de carte) (required)
     * @param cardCoin Coins de la carte (laisser vide si pas de carte) (required)
     * @param letterPageNumber Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param photoNumber Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param paysDestinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param idDestinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param letterPrintSides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 getPostagePrice(String wwServiceId, String wwAccessToken, List<String> modeEnvoi, List<String> cardFormat, List<String> cardPapier, List<String> cardCoin, Integer letterPageNumber, Integer photoNumber, List<String> paysDestinataire, List<Integer> idDestinataire, String letterPrintSides) throws ApiException {
        ApiResponse<InlineResponse20010> resp = getPostagePriceWithHttpInfo(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, paysDestinataire, idDestinataire, letterPrintSides);
        return resp.getData();
    }

    /**
     * Obtenir le montant d&#x27;un ou plusieurs courriers (non nécessaire à l&#x27;envoi)
     * Vous permet d&#x27;avoir le montant de l&#x27;affranchissement et du contenu d&#x27;un courrier en fonction de son contenu, de son mode d&#x27;envoi et de sa destination. Vous n&#x27;avez pas besoin d&#x27;utiliser cette fonction pour envoyer un courrier, mais vous pouvez l&#x27;utiliser si vous avez besoin de cette information avant d&#x27;envoyer un courrier (par exemple pour des raisons de facturation). Le montant retourné est un montant HT. La partie \&quot;affranchissement\&quot; n&#x27;est pas soumise à la TVA.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param modeEnvoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param cardFormat Format de la carte (laisser vide si pas de carte) (required)
     * @param cardPapier Papier de la carte (laisser vide si pas de carte) (required)
     * @param cardCoin Coins de la carte (laisser vide si pas de carte) (required)
     * @param letterPageNumber Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param photoNumber Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param paysDestinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param idDestinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param letterPrintSides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> getPostagePriceWithHttpInfo(String wwServiceId, String wwAccessToken, List<String> modeEnvoi, List<String> cardFormat, List<String> cardPapier, List<String> cardCoin, Integer letterPageNumber, Integer photoNumber, List<String> paysDestinataire, List<Integer> idDestinataire, String letterPrintSides) throws ApiException {
        com.squareup.okhttp.Call call = getPostagePriceValidateBeforeCall(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, paysDestinataire, idDestinataire, letterPrintSides, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtenir le montant d&#x27;un ou plusieurs courriers (non nécessaire à l&#x27;envoi) (asynchronously)
     * Vous permet d&#x27;avoir le montant de l&#x27;affranchissement et du contenu d&#x27;un courrier en fonction de son contenu, de son mode d&#x27;envoi et de sa destination. Vous n&#x27;avez pas besoin d&#x27;utiliser cette fonction pour envoyer un courrier, mais vous pouvez l&#x27;utiliser si vous avez besoin de cette information avant d&#x27;envoyer un courrier (par exemple pour des raisons de facturation). Le montant retourné est un montant HT. La partie \&quot;affranchissement\&quot; n&#x27;est pas soumise à la TVA.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param modeEnvoi Mode d&#x27;envoi du courrier : normal, suivi, lrar ou lrare (required)
     * @param cardFormat Format de la carte (laisser vide si pas de carte) (required)
     * @param cardPapier Papier de la carte (laisser vide si pas de carte) (required)
     * @param cardCoin Coins de la carte (laisser vide si pas de carte) (required)
     * @param letterPageNumber Nombre de page(s) de lettre (indiquer 0 si pas de lettre) (required)
     * @param photoNumber Nombre de photo(s) (indiquer 0 si pas de lettre) (required)
     * @param paysDestinataire Tableau de pays de destination, avec une orthographe conforme via /getCountry  (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param idDestinataire Tableau d&#x27;id de destinataire(s) déjà créé (indiquez soit paysDestinataire, soit idDestinataire). (optional)
     * @param letterPrintSides rectoverso pour une lettre imprimée recto-verso, recto pour une lettre imprimée en recto simple. (optional, default to recto)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPostagePriceAsync(String wwServiceId, String wwAccessToken, List<String> modeEnvoi, List<String> cardFormat, List<String> cardPapier, List<String> cardCoin, Integer letterPageNumber, Integer photoNumber, List<String> paysDestinataire, List<Integer> idDestinataire, String letterPrintSides, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPostagePriceValidateBeforeCall(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, paysDestinataire, idDestinataire, letterPrintSides, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProof
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param trackingNumber Numéro de suivi du courrier. (required)
     * @param document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProofCall(String wwServiceId, String wwAccessToken, String trackingNumber, String document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getProof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (trackingNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trackingNumber", trackingNumber));
        if (document != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("document", document));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProofValidateBeforeCall(String wwServiceId, String wwAccessToken, String trackingNumber, String document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getProof(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getProof(Async)");
        }
        // verify the required parameter 'trackingNumber' is set
        if (trackingNumber == null) {
            throw new ApiException("Missing the required parameter 'trackingNumber' when calling getProof(Async)");
        }
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling getProof(Async)");
        }
        
        com.squareup.okhttp.Call call = getProofCall(wwServiceId, wwAccessToken, trackingNumber, document, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtenir les documents preuves d&#x27;un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     * Cela vous permet de récepérer les fichiers de preuves de vos courriers. Uniquement possible pour les courriers envoyés en Suivi, Recommandés avec avis de réception, ou Recommandé électroniques. Vous pourrez récupérer les preuves de dépôt (pour les suivi, les recommandés et les recommandés électroniques), les avis de réception (pour les recommandés avec avis de réception numérisé et les recommandés électropniques), ainsi que les preuves de télechargements (pour les recommandés électroniques). Les documents récupérés sont au format PDF ou JPEG.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param trackingNumber Numéro de suivi du courrier. (required)
     * @param document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     * @return InlineResponse20018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20018 getProof(String wwServiceId, String wwAccessToken, String trackingNumber, String document) throws ApiException {
        ApiResponse<InlineResponse20018> resp = getProofWithHttpInfo(wwServiceId, wwAccessToken, trackingNumber, document);
        return resp.getData();
    }

    /**
     * Obtenir les documents preuves d&#x27;un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     * Cela vous permet de récepérer les fichiers de preuves de vos courriers. Uniquement possible pour les courriers envoyés en Suivi, Recommandés avec avis de réception, ou Recommandé électroniques. Vous pourrez récupérer les preuves de dépôt (pour les suivi, les recommandés et les recommandés électroniques), les avis de réception (pour les recommandés avec avis de réception numérisé et les recommandés électropniques), ainsi que les preuves de télechargements (pour les recommandés électroniques). Les documents récupérés sont au format PDF ou JPEG.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param trackingNumber Numéro de suivi du courrier. (required)
     * @param document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     * @return ApiResponse&lt;InlineResponse20018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20018> getProofWithHttpInfo(String wwServiceId, String wwAccessToken, String trackingNumber, String document) throws ApiException {
        com.squareup.okhttp.Call call = getProofValidateBeforeCall(wwServiceId, wwAccessToken, trackingNumber, document, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtenir les documents preuves d&#x27;un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.) (asynchronously)
     * Cela vous permet de récepérer les fichiers de preuves de vos courriers. Uniquement possible pour les courriers envoyés en Suivi, Recommandés avec avis de réception, ou Recommandé électroniques. Vous pourrez récupérer les preuves de dépôt (pour les suivi, les recommandés et les recommandés électroniques), les avis de réception (pour les recommandés avec avis de réception numérisé et les recommandés électropniques), ainsi que les preuves de télechargements (pour les recommandés électroniques). Les documents récupérés sont au format PDF ou JPEG.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param trackingNumber Numéro de suivi du courrier. (required)
     * @param document Le document de preuve souhaité : depot (preuve de dépôt), reception (avis de réception), ou telechargement (preuve de téléchargement). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProofAsync(String wwServiceId, String wwAccessToken, String trackingNumber, String document, final ApiCallback<InlineResponse20018> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProofValidateBeforeCall(wwServiceId, wwAccessToken, trackingNumber, document, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSuiviEnvoi
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSuiviEnvoiCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getSuiviEnvoi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idEnvoi != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idEnvoi", idEnvoi));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSuiviEnvoiValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getSuiviEnvoi(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getSuiviEnvoi(Async)");
        }
        // verify the required parameter 'idEnvoi' is set
        if (idEnvoi == null) {
            throw new ApiException("Missing the required parameter 'idEnvoi' when calling getSuiviEnvoi(Async)");
        }
        
        com.squareup.okhttp.Call call = getSuiviEnvoiCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtenir le suivi et l&#x27;état des courriers d&#x27;un envoi
     * Cette opération vous permet d&#x27;obtenir à n&#x27;importe quel moment l&#x27;état de courriers qui composent un envoi. Cet état correspond à l&#x27;état de l&#x27;impression du courrier jusqu&#x27;à sa remise à La Poste, et dans le cas des envois en LRAR ou en SUIVI, également l&#x27;historique du suivi de l&#x27;acheminement des courriers de la prise en charge par La Poste jusqu&#x27;à la distribution au destinataire.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20017 getSuiviEnvoi(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        ApiResponse<InlineResponse20017> resp = getSuiviEnvoiWithHttpInfo(wwServiceId, wwAccessToken, idEnvoi);
        return resp.getData();
    }

    /**
     * Obtenir le suivi et l&#x27;état des courriers d&#x27;un envoi
     * Cette opération vous permet d&#x27;obtenir à n&#x27;importe quel moment l&#x27;état de courriers qui composent un envoi. Cet état correspond à l&#x27;état de l&#x27;impression du courrier jusqu&#x27;à sa remise à La Poste, et dans le cas des envois en LRAR ou en SUIVI, également l&#x27;historique du suivi de l&#x27;acheminement des courriers de la prise en charge par La Poste jusqu&#x27;à la distribution au destinataire.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20017> getSuiviEnvoiWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idEnvoi) throws ApiException {
        com.squareup.okhttp.Call call = getSuiviEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtenir le suivi et l&#x27;état des courriers d&#x27;un envoi (asynchronously)
     * Cette opération vous permet d&#x27;obtenir à n&#x27;importe quel moment l&#x27;état de courriers qui composent un envoi. Cet état correspond à l&#x27;état de l&#x27;impression du courrier jusqu&#x27;à sa remise à La Poste, et dans le cas des envois en LRAR ou en SUIVI, également l&#x27;historique du suivi de l&#x27;acheminement des courriers de la prise en charge par La Poste jusqu&#x27;à la distribution au destinataire.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idEnvoi Id de l&#x27;envoi dont on veut extraire le suivi. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSuiviEnvoiAsync(String wwServiceId, String wwAccessToken, Integer idEnvoi, final ApiCallback<InlineResponse20017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSuiviEnvoiValidateBeforeCall(wwServiceId, wwAccessToken, idEnvoi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEnvois
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEnvoisCall(String wwServiceId, String wwAccessToken, Integer idUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/listEnvois";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idUser", idUser));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEnvoisValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling listEnvois(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling listEnvois(Async)");
        }
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling listEnvois(Async)");
        }
        
        com.squareup.okhttp.Call call = listEnvoisCall(wwServiceId, wwAccessToken, idUser, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lister les 50 derniers envois d&#x27;un utilisateur
     * Cette opération liste les envois, sans entrer dans le détail de chaque envoi.Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 listEnvois(String wwServiceId, String wwAccessToken, Integer idUser) throws ApiException {
        ApiResponse<InlineResponse20011> resp = listEnvoisWithHttpInfo(wwServiceId, wwAccessToken, idUser);
        return resp.getData();
    }

    /**
     * Lister les 50 derniers envois d&#x27;un utilisateur
     * Cette opération liste les envois, sans entrer dans le détail de chaque envoi.Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> listEnvoisWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idUser) throws ApiException {
        com.squareup.okhttp.Call call = listEnvoisValidateBeforeCall(wwServiceId, wwAccessToken, idUser, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lister les 50 derniers envois d&#x27;un utilisateur (asynchronously)
     * Cette opération liste les envois, sans entrer dans le détail de chaque envoi.Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur dont on veut lister les envois. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEnvoisAsync(String wwServiceId, String wwAccessToken, Integer idUser, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEnvoisValidateBeforeCall(wwServiceId, wwAccessToken, idUser, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendCourrier
     * @param idUser  (required)
     * @param modeEnvoi  (required)
     * @param adress  (required)
     * @param dateEnvoi  (required)
     * @param designation  (required)
     * @param anonymize  (required)
     * @param content  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendCourrierCall(Integer idUser, String modeEnvoi, AdressSendCourrier adress, String dateEnvoi, String designation, SendCourrierAnonymize anonymize, SendCourrierContent content, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sendCourrier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (idUser != null)
        localVarFormParams.put("idUser", idUser);
        if (modeEnvoi != null)
        localVarFormParams.put("modeEnvoi", modeEnvoi);
        if (adress != null)
        localVarFormParams.put("adress", adress);
        if (dateEnvoi != null)
        localVarFormParams.put("dateEnvoi", dateEnvoi);
        if (designation != null)
        localVarFormParams.put("designation", designation);
        if (anonymize != null)
        localVarFormParams.put("anonymize", anonymize);
        if (content != null)
        localVarFormParams.put("content", content);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendCourrierValidateBeforeCall(Integer idUser, String modeEnvoi, AdressSendCourrier adress, String dateEnvoi, String designation, SendCourrierAnonymize anonymize, SendCourrierContent content, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'modeEnvoi' is set
        if (modeEnvoi == null) {
            throw new ApiException("Missing the required parameter 'modeEnvoi' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'adress' is set
        if (adress == null) {
            throw new ApiException("Missing the required parameter 'adress' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'dateEnvoi' is set
        if (dateEnvoi == null) {
            throw new ApiException("Missing the required parameter 'dateEnvoi' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'designation' is set
        if (designation == null) {
            throw new ApiException("Missing the required parameter 'designation' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'anonymize' is set
        if (anonymize == null) {
            throw new ApiException("Missing the required parameter 'anonymize' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling sendCourrier(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling sendCourrier(Async)");
        }
        
        com.squareup.okhttp.Call call = sendCourrierCall(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Valider l&#x27;envoi d&#x27;un courrier
     * ATTENTION, cette opération génère un courrier qui sera débité de votre compte, imprimé et posté. Pour effectuer vos tests d&#x27;intégration, n&#x27;hésitez pas à contacter notre service client pour ouvrir un compte \&quot;Sandbox\&quot;.
     * @param idUser  (required)
     * @param modeEnvoi  (required)
     * @param adress  (required)
     * @param dateEnvoi  (required)
     * @param designation  (required)
     * @param anonymize  (required)
     * @param content  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 sendCourrier(Integer idUser, String modeEnvoi, AdressSendCourrier adress, String dateEnvoi, String designation, SendCourrierAnonymize anonymize, SendCourrierContent content, String wwServiceId, String wwAccessToken) throws ApiException {
        ApiResponse<InlineResponse2009> resp = sendCourrierWithHttpInfo(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken);
        return resp.getData();
    }

    /**
     * Valider l&#x27;envoi d&#x27;un courrier
     * ATTENTION, cette opération génère un courrier qui sera débité de votre compte, imprimé et posté. Pour effectuer vos tests d&#x27;intégration, n&#x27;hésitez pas à contacter notre service client pour ouvrir un compte \&quot;Sandbox\&quot;.
     * @param idUser  (required)
     * @param modeEnvoi  (required)
     * @param adress  (required)
     * @param dateEnvoi  (required)
     * @param designation  (required)
     * @param anonymize  (required)
     * @param content  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> sendCourrierWithHttpInfo(Integer idUser, String modeEnvoi, AdressSendCourrier adress, String dateEnvoi, String designation, SendCourrierAnonymize anonymize, SendCourrierContent content, String wwServiceId, String wwAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = sendCourrierValidateBeforeCall(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Valider l&#x27;envoi d&#x27;un courrier (asynchronously)
     * ATTENTION, cette opération génère un courrier qui sera débité de votre compte, imprimé et posté. Pour effectuer vos tests d&#x27;intégration, n&#x27;hésitez pas à contacter notre service client pour ouvrir un compte \&quot;Sandbox\&quot;.
     * @param idUser  (required)
     * @param modeEnvoi  (required)
     * @param adress  (required)
     * @param dateEnvoi  (required)
     * @param designation  (required)
     * @param anonymize  (required)
     * @param content  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendCourrierAsync(Integer idUser, String modeEnvoi, AdressSendCourrier adress, String dateEnvoi, String designation, SendCourrierAnonymize anonymize, SendCourrierContent content, String wwServiceId, String wwAccessToken, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendCourrierValidateBeforeCall(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadFile
     * @param idUser  (required)
     * @param token  (required)
     * @param product  (required)
     * @param type  (required)
     * @param file  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(Integer idUser, String token, String product, String type, String file, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/uploadFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (idUser != null)
        localVarFormParams.put("idUser", idUser);
        if (token != null)
        localVarFormParams.put("token", token);
        if (product != null)
        localVarFormParams.put("product", product);
        if (type != null)
        localVarFormParams.put("type", type);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(Integer idUser, String token, String product, String type, String file, String wwServiceId, String wwAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling uploadFile(Async)");
        }
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling uploadFile(Async)");
        }
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling uploadFile(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling uploadFile(Async)");
        }
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile(Async)");
        }
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling uploadFile(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling uploadFile(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadFileCall(idUser, token, product, type, file, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l&#x27;envoi de photos actuellement
     * Vous pouvez charger des fichiers (photos) dans un Token avec /uploadFile. Utile si vous envoyez plusieurs fois le même contenu, ou si vous envoyez beaucoup de fichiers (surtout en base64). A la première utilisation, un token est créé et vous est retourné. Le Token peut être ensuite utilisé pour plusieurs envois.
     * @param idUser  (required)
     * @param token  (required)
     * @param product  (required)
     * @param type  (required)
     * @param file  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 uploadFile(Integer idUser, String token, String product, String type, String file, String wwServiceId, String wwAccessToken) throws ApiException {
        ApiResponse<InlineResponse2008> resp = uploadFileWithHttpInfo(idUser, token, product, type, file, wwServiceId, wwAccessToken);
        return resp.getData();
    }

    /**
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l&#x27;envoi de photos actuellement
     * Vous pouvez charger des fichiers (photos) dans un Token avec /uploadFile. Utile si vous envoyez plusieurs fois le même contenu, ou si vous envoyez beaucoup de fichiers (surtout en base64). A la première utilisation, un token est créé et vous est retourné. Le Token peut être ensuite utilisé pour plusieurs envois.
     * @param idUser  (required)
     * @param token  (required)
     * @param product  (required)
     * @param type  (required)
     * @param file  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> uploadFileWithHttpInfo(Integer idUser, String token, String product, String type, String file, String wwServiceId, String wwAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(idUser, token, product, type, file, wwServiceId, wwAccessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l&#x27;envoi de photos actuellement (asynchronously)
     * Vous pouvez charger des fichiers (photos) dans un Token avec /uploadFile. Utile si vous envoyez plusieurs fois le même contenu, ou si vous envoyez beaucoup de fichiers (surtout en base64). A la première utilisation, un token est créé et vous est retourné. Le Token peut être ensuite utilisé pour plusieurs envois.
     * @param idUser  (required)
     * @param token  (required)
     * @param product  (required)
     * @param type  (required)
     * @param file  (required)
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(Integer idUser, String token, String product, String type, String file, String wwServiceId, String wwAccessToken, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(idUser, token, product, type, file, wwServiceId, wwAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
