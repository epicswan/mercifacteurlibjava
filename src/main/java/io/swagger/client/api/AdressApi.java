/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AdressInfosAdress;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdressApi {
    private ApiClient apiClient;

    public AdressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdressApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAdress
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress ID de l&#x27;adresse à supprimer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAdressCall(String wwServiceId, String wwAccessToken, Integer idAdress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deleteAdress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idAdress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idAdress", idAdress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAdressValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idAdress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling deleteAdress(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling deleteAdress(Async)");
        }
        // verify the required parameter 'idAdress' is set
        if (idAdress == null) {
            throw new ApiException("Missing the required parameter 'idAdress' when calling deleteAdress(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAdressCall(wwServiceId, wwAccessToken, idAdress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supprimer une adresse
     * Supprime une adresse du carnet d&#x27;adresses. Attention, opération irrémédiable.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress ID de l&#x27;adresse à supprimer (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 deleteAdress(String wwServiceId, String wwAccessToken, Integer idAdress) throws ApiException {
        ApiResponse<InlineResponse2002> resp = deleteAdressWithHttpInfo(wwServiceId, wwAccessToken, idAdress);
        return resp.getData();
    }

    /**
     * Supprimer une adresse
     * Supprime une adresse du carnet d&#x27;adresses. Attention, opération irrémédiable.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress ID de l&#x27;adresse à supprimer (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> deleteAdressWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idAdress) throws ApiException {
        com.squareup.okhttp.Call call = deleteAdressValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Supprimer une adresse (asynchronously)
     * Supprime une adresse du carnet d&#x27;adresses. Attention, opération irrémédiable.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress ID de l&#x27;adresse à supprimer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAdressAsync(String wwServiceId, String wwAccessToken, Integer idAdress, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAdressValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdressInfos
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Les adresse Id des adresses dont vous souhaitez extraire les informations (maximum 50 adresses à la fois). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdressInfosCall(String wwServiceId, String wwAccessToken, List<Integer> idAdress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getAdressInfos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idAdress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "idAdress[]", idAdress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdressInfosValidateBeforeCall(String wwServiceId, String wwAccessToken, List<Integer> idAdress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getAdressInfos(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getAdressInfos(Async)");
        }
        // verify the required parameter 'idAdress' is set
        if (idAdress == null) {
            throw new ApiException("Missing the required parameter 'idAdress' when calling getAdressInfos(Async)");
        }
        
        com.squareup.okhttp.Call call = getAdressInfosCall(wwServiceId, wwAccessToken, idAdress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtenir les infos complètes d&#x27;une ou plusieurs adresse(s) à partir de leurs adresse Id (destinataire ou expéditeur).
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Les adresse Id des adresses dont vous souhaitez extraire les informations (maximum 50 adresses à la fois). (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 getAdressInfos(String wwServiceId, String wwAccessToken, List<Integer> idAdress) throws ApiException {
        ApiResponse<InlineResponse2007> resp = getAdressInfosWithHttpInfo(wwServiceId, wwAccessToken, idAdress);
        return resp.getData();
    }

    /**
     * Obtenir les infos complètes d&#x27;une ou plusieurs adresse(s) à partir de leurs adresse Id (destinataire ou expéditeur).
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Les adresse Id des adresses dont vous souhaitez extraire les informations (maximum 50 adresses à la fois). (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> getAdressInfosWithHttpInfo(String wwServiceId, String wwAccessToken, List<Integer> idAdress) throws ApiException {
        com.squareup.okhttp.Call call = getAdressInfosValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtenir les infos complètes d&#x27;une ou plusieurs adresse(s) à partir de leurs adresse Id (destinataire ou expéditeur). (asynchronously)
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Les adresse Id des adresses dont vous souhaitez extraire les informations (maximum 50 adresses à la fois). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdressInfosAsync(String wwServiceId, String wwAccessToken, List<Integer> idAdress, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdressInfosValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCountry
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param zone Les zones à extraire : fr,z1,z2,om1,om2 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCountryCall(String wwServiceId, String wwAccessToken, List<String> zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/getCountry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "zone[]", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCountryValidateBeforeCall(String wwServiceId, String wwAccessToken, List<String> zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling getCountry(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling getCountry(Async)");
        }
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling getCountry(Async)");
        }
        
        com.squareup.okhttp.Call call = getCountryCall(wwServiceId, wwAccessToken, zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtenir la liste des pays valides
     * Vous permet d&#x27;avoir la liste des pays disponibles, avec leur orthographe normalisée.     Au sujet des zones géographiques :   fr &#x3D; France métropolitaine  om1 &#x3D; GUADELOUPE, GUYANE FRANCAISE, MARTINIQUE, MAYOTTE, REUNION, SAINT BARTHELEMY, SAINT MARTIN, ST-PIERRE-MIQUELON  om2 &#x3D; CLIPPERTON, NOUVELLE CALEDONIE, POLYNESIE FRANCAISE, TERRES AUSTRALES FR, WALLIS ET FUTUNA  z1 : UE sauf France  z2 : Reste du monde
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param zone Les zones à extraire : fr,z1,z2,om1,om2 (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getCountry(String wwServiceId, String wwAccessToken, List<String> zone) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getCountryWithHttpInfo(wwServiceId, wwAccessToken, zone);
        return resp.getData();
    }

    /**
     * Obtenir la liste des pays valides
     * Vous permet d&#x27;avoir la liste des pays disponibles, avec leur orthographe normalisée.     Au sujet des zones géographiques :   fr &#x3D; France métropolitaine  om1 &#x3D; GUADELOUPE, GUYANE FRANCAISE, MARTINIQUE, MAYOTTE, REUNION, SAINT BARTHELEMY, SAINT MARTIN, ST-PIERRE-MIQUELON  om2 &#x3D; CLIPPERTON, NOUVELLE CALEDONIE, POLYNESIE FRANCAISE, TERRES AUSTRALES FR, WALLIS ET FUTUNA  z1 : UE sauf France  z2 : Reste du monde
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param zone Les zones à extraire : fr,z1,z2,om1,om2 (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getCountryWithHttpInfo(String wwServiceId, String wwAccessToken, List<String> zone) throws ApiException {
        com.squareup.okhttp.Call call = getCountryValidateBeforeCall(wwServiceId, wwAccessToken, zone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtenir la liste des pays valides (asynchronously)
     * Vous permet d&#x27;avoir la liste des pays disponibles, avec leur orthographe normalisée.     Au sujet des zones géographiques :   fr &#x3D; France métropolitaine  om1 &#x3D; GUADELOUPE, GUYANE FRANCAISE, MARTINIQUE, MAYOTTE, REUNION, SAINT BARTHELEMY, SAINT MARTIN, ST-PIERRE-MIQUELON  om2 &#x3D; CLIPPERTON, NOUVELLE CALEDONIE, POLYNESIE FRANCAISE, TERRES AUSTRALES FR, WALLIS ET FUTUNA  z1 : UE sauf France  z2 : Reste du monde
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param zone Les zones à extraire : fr,z1,z2,om1,om2 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCountryAsync(String wwServiceId, String wwAccessToken, List<String> zone, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCountryValidateBeforeCall(wwServiceId, wwAccessToken, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAdress
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param search Recherche d&#x27;une adresse précise (de la forme {\&quot;nom\&quot;:\&quot;\&quot;,\&quot;societe\&quot;:\&quot;\&quot;,\&quot;cp\&quot;:\&quot;\&quot;,\&quot;ville\&quot;:\&quot;\&quot;}). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAdressCall(String wwServiceId, String wwAccessToken, Integer idUser, String type, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/listAdress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idUser", idUser));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAdressValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idUser, String type, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling listAdress(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling listAdress(Async)");
        }
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling listAdress(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listAdress(Async)");
        }
        
        com.squareup.okhttp.Call call = listAdressCall(wwServiceId, wwAccessToken, idUser, type, search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lister les adresses du carnet d&#x27;adresses d&#x27;un utilisateur. Limité à 500 adresses. Pour plus de précision dans la recherche utilisez le paramètre \&quot;search\&quot;.
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param search Recherche d&#x27;une adresse précise (de la forme {\&quot;nom\&quot;:\&quot;\&quot;,\&quot;societe\&quot;:\&quot;\&quot;,\&quot;cp\&quot;:\&quot;\&quot;,\&quot;ville\&quot;:\&quot;\&quot;}). (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 listAdress(String wwServiceId, String wwAccessToken, Integer idUser, String type, String search) throws ApiException {
        ApiResponse<InlineResponse2006> resp = listAdressWithHttpInfo(wwServiceId, wwAccessToken, idUser, type, search);
        return resp.getData();
    }

    /**
     * Lister les adresses du carnet d&#x27;adresses d&#x27;un utilisateur. Limité à 500 adresses. Pour plus de précision dans la recherche utilisez le paramètre \&quot;search\&quot;.
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param search Recherche d&#x27;une adresse précise (de la forme {\&quot;nom\&quot;:\&quot;\&quot;,\&quot;societe\&quot;:\&quot;\&quot;,\&quot;cp\&quot;:\&quot;\&quot;,\&quot;ville\&quot;:\&quot;\&quot;}). (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> listAdressWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idUser, String type, String search) throws ApiException {
        com.squareup.okhttp.Call call = listAdressValidateBeforeCall(wwServiceId, wwAccessToken, idUser, type, search, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lister les adresses du carnet d&#x27;adresses d&#x27;un utilisateur. Limité à 500 adresses. Pour plus de précision dans la recherche utilisez le paramètre \&quot;search\&quot;. (asynchronously)
     * 
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param search Recherche d&#x27;une adresse précise (de la forme {\&quot;nom\&quot;:\&quot;\&quot;,\&quot;societe\&quot;:\&quot;\&quot;,\&quot;cp\&quot;:\&quot;\&quot;,\&quot;ville\&quot;:\&quot;\&quot;}). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAdressAsync(String wwServiceId, String wwAccessToken, Integer idUser, String type, String search, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAdressValidateBeforeCall(wwServiceId, wwAccessToken, idUser, type, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setNewAdress
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param adress  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setNewAdressCall(String wwServiceId, String wwAccessToken, Integer idUser, String type, AdressInfosAdress adress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/setNewAdress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idUser", idUser));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (adress != null)
        localVarFormParams.put("adress", adress);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setNewAdressValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idUser, String type, AdressInfosAdress adress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling setNewAdress(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling setNewAdress(Async)");
        }
        // verify the required parameter 'idUser' is set
        if (idUser == null) {
            throw new ApiException("Missing the required parameter 'idUser' when calling setNewAdress(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling setNewAdress(Async)");
        }
        
        com.squareup.okhttp.Call call = setNewAdressCall(wwServiceId, wwAccessToken, idUser, type, adress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Créer une nouvelle adresse dans le carnet d&#x27;adresses (non obligatoire pour l&#x27;envoi d&#x27;un courrier)
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Les adresses sont liées à un utilisateur précis.  Vous ne pouvez pas créer plusieurs fois la même adresse, mais réutiliser les adresses créées.  Sont obligatoires : (nom et/ou société), (cp), (ville), (pays)  Pays doit être avec une orthographe conforme cf. getCountry()  Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.  Si vous ne souhaitez pas utiliser de carnet d&#x27;adresses, vous pouvez intégrer directement les adresses dans l&#x27;envoi des courriers, sans avoir recours à cette fonction avant.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param adress  (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 setNewAdress(String wwServiceId, String wwAccessToken, Integer idUser, String type, AdressInfosAdress adress) throws ApiException {
        ApiResponse<InlineResponse2005> resp = setNewAdressWithHttpInfo(wwServiceId, wwAccessToken, idUser, type, adress);
        return resp.getData();
    }

    /**
     * Créer une nouvelle adresse dans le carnet d&#x27;adresses (non obligatoire pour l&#x27;envoi d&#x27;un courrier)
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Les adresses sont liées à un utilisateur précis.  Vous ne pouvez pas créer plusieurs fois la même adresse, mais réutiliser les adresses créées.  Sont obligatoires : (nom et/ou société), (cp), (ville), (pays)  Pays doit être avec une orthographe conforme cf. getCountry()  Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.  Si vous ne souhaitez pas utiliser de carnet d&#x27;adresses, vous pouvez intégrer directement les adresses dans l&#x27;envoi des courriers, sans avoir recours à cette fonction avant.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param adress  (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> setNewAdressWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idUser, String type, AdressInfosAdress adress) throws ApiException {
        com.squareup.okhttp.Call call = setNewAdressValidateBeforeCall(wwServiceId, wwAccessToken, idUser, type, adress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Créer une nouvelle adresse dans le carnet d&#x27;adresses (non obligatoire pour l&#x27;envoi d&#x27;un courrier) (asynchronously)
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Les adresses sont liées à un utilisateur précis.  Vous ne pouvez pas créer plusieurs fois la même adresse, mais réutiliser les adresses créées.  Sont obligatoires : (nom et/ou société), (cp), (ville), (pays)  Pays doit être avec une orthographe conforme cf. getCountry()  Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.  Si vous ne souhaitez pas utiliser de carnet d&#x27;adresses, vous pouvez intégrer directement les adresses dans l&#x27;envoi des courriers, sans avoir recours à cette fonction avant.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idUser User Id de l&#x27;utilisateur propriétaire de cette adresse. (required)
     * @param type Type d&#x27;adresse : Expéditeur (exp) ou destinataire (dest) (required)
     * @param adress  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setNewAdressAsync(String wwServiceId, String wwAccessToken, Integer idUser, String type, AdressInfosAdress adress, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setNewAdressValidateBeforeCall(wwServiceId, wwAccessToken, idUser, type, adress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAdress
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Id de l&#x27;adresse à modifier. (required)
     * @param adress  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAdressCall(String wwServiceId, String wwAccessToken, Integer idAdress, AdressInfosAdress adress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/updateAdress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idAdress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idAdress", idAdress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (wwServiceId != null)
        localVarHeaderParams.put("ww-service-id", apiClient.parameterToString(wwServiceId));
        if (wwAccessToken != null)
        localVarHeaderParams.put("ww-access-token", apiClient.parameterToString(wwAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (adress != null)
        localVarFormParams.put("adress", adress);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAdressValidateBeforeCall(String wwServiceId, String wwAccessToken, Integer idAdress, AdressInfosAdress adress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'wwServiceId' is set
        if (wwServiceId == null) {
            throw new ApiException("Missing the required parameter 'wwServiceId' when calling updateAdress(Async)");
        }
        // verify the required parameter 'wwAccessToken' is set
        if (wwAccessToken == null) {
            throw new ApiException("Missing the required parameter 'wwAccessToken' when calling updateAdress(Async)");
        }
        // verify the required parameter 'idAdress' is set
        if (idAdress == null) {
            throw new ApiException("Missing the required parameter 'idAdress' when calling updateAdress(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAdressCall(wwServiceId, wwAccessToken, idAdress, adress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modifier une adresse dans le carnet d&#x27;adresses
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Sont obligatoires : (nom et/ou société), (cp), (ville), (pays) / pays doit être avec une orthographe conforme cf. getCountry() / Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Id de l&#x27;adresse à modifier. (required)
     * @param adress  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 updateAdress(String wwServiceId, String wwAccessToken, Integer idAdress, AdressInfosAdress adress) throws ApiException {
        ApiResponse<InlineResponse2002> resp = updateAdressWithHttpInfo(wwServiceId, wwAccessToken, idAdress, adress);
        return resp.getData();
    }

    /**
     * Modifier une adresse dans le carnet d&#x27;adresses
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Sont obligatoires : (nom et/ou société), (cp), (ville), (pays) / pays doit être avec une orthographe conforme cf. getCountry() / Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Id de l&#x27;adresse à modifier. (required)
     * @param adress  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> updateAdressWithHttpInfo(String wwServiceId, String wwAccessToken, Integer idAdress, AdressInfosAdress adress) throws ApiException {
        com.squareup.okhttp.Call call = updateAdressValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, adress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modifier une adresse dans le carnet d&#x27;adresses (asynchronously)
     * Cela peut-être une adresse d&#x27;expéditeur ou de destinataire. Sont obligatoires : (nom et/ou société), (cp), (ville), (pays) / pays doit être avec une orthographe conforme cf. getCountry() / Si une infos est inutilisée, tout de même l&#x27;envoyer en string vide.
     * @param wwServiceId Votre service Id (required)
     * @param wwAccessToken Un access token valide (required)
     * @param idAdress Id de l&#x27;adresse à modifier. (required)
     * @param adress  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAdressAsync(String wwServiceId, String wwAccessToken, Integer idAdress, AdressInfosAdress adress, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAdressValidateBeforeCall(wwServiceId, wwAccessToken, idAdress, adress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
