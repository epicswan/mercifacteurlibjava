/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.List;
import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AdressInfosAdress
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class AdressInfosAdress {
  @SerializedName("logo")
  private String logo = null;

  @SerializedName("civilite")
  private String civilite = null;

  @SerializedName("nom")
  private String nom = null;

  @SerializedName("prenom")
  private String prenom = null;

  @SerializedName("societe")
  private String societe = null;

  @SerializedName("adresse1")
  private String adresse1 = null;

  @SerializedName("adresse2")
  private String adresse2 = null;

  @SerializedName("adresse3")
  private String adresse3 = null;

  @SerializedName("cp")
  private String cp = null;

  @SerializedName("ville")
  private String ville = null;

  @SerializedName("pays")
  private String pays = null;

  @SerializedName("phone")
  private String phone = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("consent")
  private Integer consent = null;

  public AdressInfosAdress logo(String logo) {
    this.logo = logo;
    return this;
  }

   /**
   * Url du logo (uniquement pour les expéditeurs)
   * @return logo
  **/
  @Schema(description = "Url du logo (uniquement pour les expéditeurs)")
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public AdressInfosAdress civilite(String civilite) {
    this.civilite = civilite;
    return this;
  }

   /**
   * Civilité du contact
   * @return civilite
  **/
  @Schema(description = "Civilité du contact")
  public String getCivilite() {
    return civilite;
  }

  public void setCivilite(String civilite) {
    this.civilite = civilite;
  }

  public AdressInfosAdress nom(String nom) {
    this.nom = nom;
    return this;
  }

   /**
   * Nom du contact (doit être rempli si societe est vide)
   * @return nom
  **/
  @Schema(description = "Nom du contact (doit être rempli si societe est vide)")
  public String getNom() {
    return nom;
  }

  public void setNom(String nom) {
    this.nom = nom;
  }

  public AdressInfosAdress prenom(String prenom) {
    this.prenom = prenom;
    return this;
  }

   /**
   * Prénom du contact
   * @return prenom
  **/
  @Schema(description = "Prénom du contact")
  public String getPrenom() {
    return prenom;
  }

  public void setPrenom(String prenom) {
    this.prenom = prenom;
  }

  public AdressInfosAdress societe(String societe) {
    this.societe = societe;
    return this;
  }

   /**
   * Société du contact (doit être rempli si le nom est vide)
   * @return societe
  **/
  @Schema(description = "Société du contact (doit être rempli si le nom est vide)")
  public String getSociete() {
    return societe;
  }

  public void setSociete(String societe) {
    this.societe = societe;
  }

  public AdressInfosAdress adresse1(String adresse1) {
    this.adresse1 = adresse1;
    return this;
  }

   /**
   * Première ligne de l&#x27;adresse (exemple : la rue)
   * @return adresse1
  **/
  @Schema(description = "Première ligne de l'adresse (exemple : la rue)")
  public String getAdresse1() {
    return adresse1;
  }

  public void setAdresse1(String adresse1) {
    this.adresse1 = adresse1;
  }

  public AdressInfosAdress adresse2(String adresse2) {
    this.adresse2 = adresse2;
    return this;
  }

   /**
   * Seconde ligne de l&#x27;adresse (exemple : le lieu-dit)
   * @return adresse2
  **/
  @Schema(description = "Seconde ligne de l'adresse (exemple : le lieu-dit)")
  public String getAdresse2() {
    return adresse2;
  }

  public void setAdresse2(String adresse2) {
    this.adresse2 = adresse2;
  }

  public AdressInfosAdress adresse3(String adresse3) {
    this.adresse3 = adresse3;
    return this;
  }

   /**
   * Troisième ligne de l&#x27;adresse (exemple : la boite postale)
   * @return adresse3
  **/
  @Schema(description = "Troisième ligne de l'adresse (exemple : la boite postale)")
  public String getAdresse3() {
    return adresse3;
  }

  public void setAdresse3(String adresse3) {
    this.adresse3 = adresse3;
  }

  public AdressInfosAdress cp(String cp) {
    this.cp = cp;
    return this;
  }

   /**
   * Code postal de l&#x27;adresse
   * @return cp
  **/
  @Schema(required = true, description = "Code postal de l'adresse")
  public String getCp() {
    return cp;
  }

  public void setCp(String cp) {
    this.cp = cp;
  }

  public AdressInfosAdress ville(String ville) {
    this.ville = ville;
    return this;
  }

   /**
   * Ville de l&#x27;adresse
   * @return ville
  **/
  @Schema(required = true, description = "Ville de l'adresse")
  public String getVille() {
    return ville;
  }

  public void setVille(String ville) {
    this.ville = ville;
  }

  public AdressInfosAdress pays(String pays) {
    this.pays = pays;
    return this;
  }

   /**
   * Pays avec une orthographe conforme (cf. getCountry)
   * @return pays
  **/
  @Schema(required = true, description = "Pays avec une orthographe conforme (cf. getCountry)")
  public String getPays() {
    return pays;
  }

  public void setPays(String pays) {
    this.pays = pays;
  }

  public AdressInfosAdress phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Le téléphone mobile du destinataire en cas d&#x27;envoi de recommandé électronique avec OTP SMS (format +33628749452)
   * @return phone
  **/
  @Schema(description = "Le téléphone mobile du destinataire en cas d'envoi de recommandé électronique avec OTP SMS (format +33628749452)")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public AdressInfosAdress email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Adesse email du destinataire ou de l&#x27;expéditeur en cas d&#x27;envoi de recommandé électronique
   * @return email
  **/
  @Schema(description = "Adesse email du destinataire ou de l'expéditeur en cas d'envoi de recommandé électronique")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public AdressInfosAdress consent(Integer consent) {
    this.consent = consent;
    return this;
  }

   /**
   * Pour le destinataire dans le cas d&#x27;un envoi de recommandé électronique, il s&#x27;agit du consentement donné par le destinataire (doit être &#x3D;1 pour permettre l&#x27;envoi d&#x27;un recommandé électronique)
   * @return consent
  **/
  @Schema(description = "Pour le destinataire dans le cas d'un envoi de recommandé électronique, il s'agit du consentement donné par le destinataire (doit être =1 pour permettre l'envoi d'un recommandé électronique)")
  public Integer getConsent() {
    return consent;
  }

  public void setConsent(Integer consent) {
    this.consent = consent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdressInfosAdress adressInfosAdress = (AdressInfosAdress) o;
    return Objects.equals(this.logo, adressInfosAdress.logo) &&
        Objects.equals(this.civilite, adressInfosAdress.civilite) &&
        Objects.equals(this.nom, adressInfosAdress.nom) &&
        Objects.equals(this.prenom, adressInfosAdress.prenom) &&
        Objects.equals(this.societe, adressInfosAdress.societe) &&
        Objects.equals(this.adresse1, adressInfosAdress.adresse1) &&
        Objects.equals(this.adresse2, adressInfosAdress.adresse2) &&
        Objects.equals(this.adresse3, adressInfosAdress.adresse3) &&
        Objects.equals(this.cp, adressInfosAdress.cp) &&
        Objects.equals(this.ville, adressInfosAdress.ville) &&
        Objects.equals(this.pays, adressInfosAdress.pays) &&
        Objects.equals(this.phone, adressInfosAdress.phone) &&
        Objects.equals(this.email, adressInfosAdress.email) &&
        Objects.equals(this.consent, adressInfosAdress.consent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logo, civilite, nom, prenom, societe, adresse1, adresse2, adresse3, cp, ville, pays, phone, email, consent);
  }


  @Override

  public String toString() {
    List<String> values = Arrays.asList(
            "\"logo\": \"" + toIndentedString(logo) + "\"",
            "\"civilite\": \"" + toIndentedString(civilite) + "\"",
            "\"nom\": \"" + toIndentedString(nom) + "\"",
            "\"prenom\": \"" + toIndentedString(prenom) + "\"",
            "\"societe\": \"" + toIndentedString(societe) + "\"",
            "\"adresse1\": \"" + toIndentedString(adresse1) + "\"",
            "\"adresse2\": \"" + toIndentedString(adresse2) + "\"",
            "\"adresse3\": \"" + toIndentedString(adresse3) + "\"",
            "\"cp\": \"" + toIndentedString(cp) + "\"",
            "\"ville\": \"" + toIndentedString(ville) + "\"",
            "\"pays\": \"" + toIndentedString(pays) + "\"",
            "\"phone\": \"" + toIndentedString(phone) + "\"",
            "\"email\": \"" + toIndentedString(email) + "\"",
            "\"consent\": " + toIndentedString(consent)
    );

    return String.format("{%s}", String.join(",", values));
  }



  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
