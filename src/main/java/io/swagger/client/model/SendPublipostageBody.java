/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SendCourrierAnonymize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SendPublipostageBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class SendPublipostageBody {
  @SerializedName("idEnvoi")
  private Integer idEnvoi = null;

  @SerializedName("idExp")
  private Integer idExp = null;

  @SerializedName("jsonExp")
  private String jsonExp = null;

  /**
   * Mode d&#x27;envoi du courrier : suivi, lrar, lrare, ou normal
   */
  @JsonAdapter(ModeEnvoiEnum.Adapter.class)
  public enum ModeEnvoiEnum {
    @SerializedName("normal")
    NORMAL("normal"),
    @SerializedName("suivi")
    SUIVI("suivi"),
    @SerializedName("lrar")
    LRAR("lrar"),
    @SerializedName("lrare")
    LRARE("lrare");

    private String value;

    ModeEnvoiEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnvoiEnum fromValue(String input) {
      for (ModeEnvoiEnum b : ModeEnvoiEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnvoiEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnvoiEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModeEnvoiEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModeEnvoiEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("modeEnvoi")
  private ModeEnvoiEnum modeEnvoi = null;

  @SerializedName("anonymize")
  private SendCourrierAnonymize anonymize = null;

  public SendPublipostageBody idEnvoi(Integer idEnvoi) {
    this.idEnvoi = idEnvoi;
    return this;
  }

   /**
   * Identifiant de l&#x27;envoi qui vous a été retourné par \\sourcePublipostage
   * @return idEnvoi
  **/
  @Schema(description = "Identifiant de l'envoi qui vous a été retourné par \\sourcePublipostage")
  public Integer getIdEnvoi() {
    return idEnvoi;
  }

  public void setIdEnvoi(Integer idEnvoi) {
    this.idEnvoi = idEnvoi;
  }

  public SendPublipostageBody idExp(Integer idExp) {
    this.idExp = idExp;
    return this;
  }

   /**
   * Id de l&#x27;adresse d&#x27;expéditeur (créée auparavant avec /setNewAdress) - si vous utilisez \&quot;idExp\&quot;, laissez vide \&quot;jsonExp\&quot;.
   * @return idExp
  **/
  @Schema(description = "Id de l'adresse d'expéditeur (créée auparavant avec /setNewAdress) - si vous utilisez \"idExp\", laissez vide \"jsonExp\".")
  public Integer getIdExp() {
    return idExp;
  }

  public void setIdExp(Integer idExp) {
    this.idExp = idExp;
  }

  public SendPublipostageBody jsonExp(String jsonExp) {
    this.jsonExp = jsonExp;
    return this;
  }

   /**
   * json contenant l&#x27;adresse d&#x27;expéditeur (si vous ne souhaitez pas créer l&#x27;adresse auparavant avec /setNewAdress) - si vous utilisez \&quot;jsonExp\&quot;, laissez vide \&quot;idExp\&quot;.
   * @return jsonExp
  **/
  @Schema(description = "json contenant l'adresse d'expéditeur (si vous ne souhaitez pas créer l'adresse auparavant avec /setNewAdress) - si vous utilisez \"jsonExp\", laissez vide \"idExp\".")
  public String getJsonExp() {
    return jsonExp;
  }

  public void setJsonExp(String jsonExp) {
    this.jsonExp = jsonExp;
  }

  public SendPublipostageBody modeEnvoi(ModeEnvoiEnum modeEnvoi) {
    this.modeEnvoi = modeEnvoi;
    return this;
  }

   /**
   * Mode d&#x27;envoi du courrier : suivi, lrar, lrare, ou normal
   * @return modeEnvoi
  **/
  @Schema(description = "Mode d'envoi du courrier : suivi, lrar, lrare, ou normal")
  public ModeEnvoiEnum getModeEnvoi() {
    return modeEnvoi;
  }

  public void setModeEnvoi(ModeEnvoiEnum modeEnvoi) {
    this.modeEnvoi = modeEnvoi;
  }

  public SendPublipostageBody anonymize(SendCourrierAnonymize anonymize) {
    this.anonymize = anonymize;
    return this;
  }

   /**
   * Get anonymize
   * @return anonymize
  **/
  @Schema(description = "")
  public SendCourrierAnonymize getAnonymize() {
    return anonymize;
  }

  public void setAnonymize(SendCourrierAnonymize anonymize) {
    this.anonymize = anonymize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendPublipostageBody sendPublipostageBody = (SendPublipostageBody) o;
    return Objects.equals(this.idEnvoi, sendPublipostageBody.idEnvoi) &&
        Objects.equals(this.idExp, sendPublipostageBody.idExp) &&
        Objects.equals(this.jsonExp, sendPublipostageBody.jsonExp) &&
        Objects.equals(this.modeEnvoi, sendPublipostageBody.modeEnvoi) &&
        Objects.equals(this.anonymize, sendPublipostageBody.anonymize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendPublipostageBody {\n");
    
    sb.append("    idEnvoi: ").append(toIndentedString(idEnvoi)).append("\n");
    sb.append("    idExp: ").append(toIndentedString(idExp)).append("\n");
    sb.append("    jsonExp: ").append(toIndentedString(jsonExp)).append("\n");
    sb.append("    modeEnvoi: ").append(toIndentedString(modeEnvoi)).append("\n");
    sb.append("    anonymize: ").append(toIndentedString(anonymize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
