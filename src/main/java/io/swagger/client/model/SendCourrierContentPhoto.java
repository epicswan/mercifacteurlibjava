/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.List;
import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Base64FilesSendCourrier;
import io.swagger.client.model.FilesSendCourrier;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Définition de photos, envoyer une chaine vide si pas de photo dans ce courrier (&#x3D;&#x27;&#x27;)
 */
@Schema(description = "Définition de photos, envoyer une chaine vide si pas de photo dans ce courrier (='')")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class SendCourrierContentPhoto {
  @SerializedName("files")
  private FilesSendCourrier files = null;

  @SerializedName("base64files")
  private Base64FilesSendCourrier base64files = null;

  @SerializedName("tokenLibrary")
  private String tokenLibrary = null;

  public SendCourrierContentPhoto files(FilesSendCourrier files) {
    this.files = files;
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public FilesSendCourrier getFiles() {
    return files;
  }

  public void setFiles(FilesSendCourrier files) {
    this.files = files;
  }

  public SendCourrierContentPhoto base64files(Base64FilesSendCourrier base64files) {
    this.base64files = base64files;
    return this;
  }

   /**
   * Get base64files
   * @return base64files
  **/
  @Schema(description = "")
  public Base64FilesSendCourrier getBase64files() {
    return base64files;
  }

  public void setBase64files(Base64FilesSendCourrier base64files) {
    this.base64files = base64files;
  }

  public SendCourrierContentPhoto tokenLibrary(String tokenLibrary) {
    this.tokenLibrary = tokenLibrary;
    return this;
  }

   /**
   * vide, ou token contenant les photos à envoyer (token retourné par /uploadFile)
   * @return tokenLibrary
  **/
  @Schema(description = "vide, ou token contenant les photos à envoyer (token retourné par /uploadFile)")
  public String getTokenLibrary() {
    return tokenLibrary;
  }

  public void setTokenLibrary(String tokenLibrary) {
    this.tokenLibrary = tokenLibrary;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendCourrierContentPhoto sendCourrierContentPhoto = (SendCourrierContentPhoto) o;
    return Objects.equals(this.files, sendCourrierContentPhoto.files) &&
        Objects.equals(this.base64files, sendCourrierContentPhoto.base64files) &&
        Objects.equals(this.tokenLibrary, sendCourrierContentPhoto.tokenLibrary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(files, base64files, tokenLibrary);
  }


  @Override
  public String toString() {
    List<String> values = Arrays.asList(
    "files: " + toIndentedString(files),
    "base64files: " + toIndentedString(base64files),
    "tokenLibrary: " + toIndentedString(tokenLibrary)
    );

    return String.format("{\"%s\"}", String.join(",", values));
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
