/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Les Id des adresses d&#x27;expéditeur et de destinataire (1 expéditeur, 1 ou plusieurs destinataires). OU directement les adresses dans un objet si vous ne souhaitez pas utiliser le carnet d&#x27;adresses (plus d&#x27;infos ici : https://github.com/MerciFacteur/Merci-facteur-API#format-des-adresses-lors-de-lenvoi-dun-courrier-).
 */
@Schema(description = "Les Id des adresses d'expéditeur et de destinataire (1 expéditeur, 1 ou plusieurs destinataires). OU directement les adresses dans un objet si vous ne souhaitez pas utiliser le carnet d'adresses (plus d'infos ici : https://github.com/MerciFacteur/Merci-facteur-API#format-des-adresses-lors-de-lenvoi-dun-courrier-).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class AdressSendCourrier {
  @SerializedName("exp")
  private String exp = null;

  @SerializedName("dest")
  private List<String> dest = null;

  public AdressSendCourrier exp(String exp) {
    this.exp = exp;
    return this;
  }

   /**
   * Indiquez ici l&#x27;id de l&#x27;expéditeur OU un object contenant directement l&#x27;adresse de l&#x27;expéditeur.
   * @return exp
  **/
  @Schema(description = "Indiquez ici l'id de l'expéditeur OU un object contenant directement l'adresse de l'expéditeur.")
  public String getExp() {
    return exp;
  }

  public void setExp(String exp) {
    this.exp = exp;
  }

  public AdressSendCourrier dest(List<String> dest) {
    this.dest = dest;
    return this;
  }

  public AdressSendCourrier addDestItem(String destItem) {
    if (this.dest == null) {
      this.dest = new ArrayList<String>();
    }
    this.dest.add(destItem);
    return this;
  }

   /**
   * Indiquez ici un tableau avec les ID des destinataires OU un tableau d&#x27;objects contenant directement les adresses des destinataires.
   * @return dest
  **/
  @Schema(description = "Indiquez ici un tableau avec les ID des destinataires OU un tableau d'objects contenant directement les adresses des destinataires.")
  public List<String> getDest() {
    return dest;
  }

  public void setDest(List<String> dest) {
    this.dest = dest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdressSendCourrier adressSendCourrier = (AdressSendCourrier) o;
    return Objects.equals(this.exp, adressSendCourrier.exp) &&
        Objects.equals(this.dest, adressSendCourrier.dest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exp, dest);
  }


  @Override
  public String toString() {
    List<String> values = Arrays.asList(
            "\"exp\": \"" + toIndentedString(exp) + "\"",
            "\"dest\": " + toIndentedString(dest)
    );

    return String.format("{%s}", String.join(",", values));
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
