/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Les informations du template. Il convient de contrôler les champs de fusion extraits pour vous assurer qu&#x27;il n&#x27;y a pas d&#x27;erreur.
 */
@Schema(description = "Les informations du template. Il convient de contrôler les champs de fusion extraits pour vous assurer qu'il n'y a pas d'erreur.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class InlineResponse20014TemplateValidation {
  @SerializedName("timeTemplate")
  private Integer timeTemplate = null;

  @SerializedName("template")
  private String template = null;

  @SerializedName("inputs")
  private List<String> inputs = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("nbPage")
  private Integer nbPage = null;

  public InlineResponse20014TemplateValidation timeTemplate(Integer timeTemplate) {
    this.timeTemplate = timeTemplate;
    return this;
  }

   /**
   * timestamp du template (ne pas modifier)
   * @return timeTemplate
  **/
  @Schema(description = "timestamp du template (ne pas modifier)")
  public Integer getTimeTemplate() {
    return timeTemplate;
  }

  public void setTimeTemplate(Integer timeTemplate) {
    this.timeTemplate = timeTemplate;
  }

  public InlineResponse20014TemplateValidation template(String template) {
    this.template = template;
    return this;
  }

   /**
   * identifiant du template (ne pas modifier)
   * @return template
  **/
  @Schema(description = "identifiant du template (ne pas modifier)")
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }

  public InlineResponse20014TemplateValidation inputs(List<String> inputs) {
    this.inputs = inputs;
    return this;
  }

  public InlineResponse20014TemplateValidation addInputsItem(String inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<String>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * champs de fusion détectés (important : à contrôler)
   * @return inputs
  **/
  @Schema(description = "champs de fusion détectés (important : à contrôler)")
  public List<String> getInputs() {
    return inputs;
  }

  public void setInputs(List<String> inputs) {
    this.inputs = inputs;
  }

  public InlineResponse20014TemplateValidation key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Clé de validation du template (ne pas modifier)
   * @return key
  **/
  @Schema(description = "Clé de validation du template (ne pas modifier)")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public InlineResponse20014TemplateValidation nbPage(Integer nbPage) {
    this.nbPage = nbPage;
    return this;
  }

   /**
   * Nombre de page(s) détectée(s) dans la lettre (important : à contrôler)
   * @return nbPage
  **/
  @Schema(description = "Nombre de page(s) détectée(s) dans la lettre (important : à contrôler)")
  public Integer getNbPage() {
    return nbPage;
  }

  public void setNbPage(Integer nbPage) {
    this.nbPage = nbPage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20014TemplateValidation inlineResponse20014TemplateValidation = (InlineResponse20014TemplateValidation) o;
    return Objects.equals(this.timeTemplate, inlineResponse20014TemplateValidation.timeTemplate) &&
        Objects.equals(this.template, inlineResponse20014TemplateValidation.template) &&
        Objects.equals(this.inputs, inlineResponse20014TemplateValidation.inputs) &&
        Objects.equals(this.key, inlineResponse20014TemplateValidation.key) &&
        Objects.equals(this.nbPage, inlineResponse20014TemplateValidation.nbPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeTemplate, template, inputs, key, nbPage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20014TemplateValidation {\n");
    
    sb.append("    timeTemplate: ").append(toIndentedString(timeTemplate)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    nbPage: ").append(toIndentedString(nbPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
