/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Les informations nécessaires à l&#x27;ouverture d&#x27;un ticket auprès du service après vente de Merci facteur
 */
@Schema(description = "Les informations nécessaires à l'ouverture d'un ticket auprès du service après vente de Merci facteur")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class SavInfos {
  @SerializedName("yourServiceName")
  private String yourServiceName = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("referenceCourrier")
  private String referenceCourrier = null;

  @SerializedName("sujet")
  private String sujet = null;

  @SerializedName("messageTexte")
  private String messageTexte = null;

  public SavInfos yourServiceName(String yourServiceName) {
    this.yourServiceName = yourServiceName;
    return this;
  }

   /**
   * Nom de votre service, tel qu&#x27;il est connu par la personne qui ouvre le ticket SAV (le SAV de Merci facteur se présentera comme traitant la demande pour vous).
   * @return yourServiceName
  **/
  @Schema(required = true, description = "Nom de votre service, tel qu'il est connu par la personne qui ouvre le ticket SAV (le SAV de Merci facteur se présentera comme traitant la demande pour vous).")
  public String getYourServiceName() {
    return yourServiceName;
  }

  public void setYourServiceName(String yourServiceName) {
    this.yourServiceName = yourServiceName;
  }

  public SavInfos email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Adresse email de la personne qui ouvre ce ticket SAV (les réponses du SAV seront envoyées sur cette adresse)
   * @return email
  **/
  @Schema(required = true, description = "Adresse email de la personne qui ouvre ce ticket SAV (les réponses du SAV seront envoyées sur cette adresse)")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public SavInfos referenceCourrier(String referenceCourrier) {
    this.referenceCourrier = referenceCourrier;
    return this;
  }

   /**
   * Si connue, la référence du courrier concerné par ce ticet SAV.
   * @return referenceCourrier
  **/
  @Schema(description = "Si connue, la référence du courrier concerné par ce ticet SAV.")
  public String getReferenceCourrier() {
    return referenceCourrier;
  }

  public void setReferenceCourrier(String referenceCourrier) {
    this.referenceCourrier = referenceCourrier;
  }

  public SavInfos sujet(String sujet) {
    this.sujet = sujet;
    return this;
  }

   /**
   * Sujet de la demande.
   * @return sujet
  **/
  @Schema(required = true, description = "Sujet de la demande.")
  public String getSujet() {
    return sujet;
  }

  public void setSujet(String sujet) {
    this.sujet = sujet;
  }

  public SavInfos messageTexte(String messageTexte) {
    this.messageTexte = messageTexte;
    return this;
  }

   /**
   * Texte de la demande.
   * @return messageTexte
  **/
  @Schema(required = true, description = "Texte de la demande.")
  public String getMessageTexte() {
    return messageTexte;
  }

  public void setMessageTexte(String messageTexte) {
    this.messageTexte = messageTexte;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavInfos savInfos = (SavInfos) o;
    return Objects.equals(this.yourServiceName, savInfos.yourServiceName) &&
        Objects.equals(this.email, savInfos.email) &&
        Objects.equals(this.referenceCourrier, savInfos.referenceCourrier) &&
        Objects.equals(this.sujet, savInfos.sujet) &&
        Objects.equals(this.messageTexte, savInfos.messageTexte);
  }

  @Override
  public int hashCode() {
    return Objects.hash(yourServiceName, email, referenceCourrier, sujet, messageTexte);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavInfos {\n");
    
    sb.append("    yourServiceName: ").append(toIndentedString(yourServiceName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    referenceCourrier: ").append(toIndentedString(referenceCourrier)).append("\n");
    sb.append("    sujet: ").append(toIndentedString(sujet)).append("\n");
    sb.append("    messageTexte: ").append(toIndentedString(messageTexte)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
