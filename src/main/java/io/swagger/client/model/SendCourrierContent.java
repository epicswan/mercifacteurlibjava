/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SendCourrierContentCard;
import io.swagger.client.model.SendCourrierContentLetter;
import io.swagger.client.model.SendCourrierContentPhoto;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Contenu du courrier à envoyer
 */
@Schema(description = "Contenu du courrier à envoyer")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class SendCourrierContent {
  @SerializedName("letter")
  private SendCourrierContentLetter letter = null;

  @SerializedName("photo")
  private SendCourrierContentPhoto photo = null;

  @SerializedName("card")
  private SendCourrierContentCard card = null;

  public SendCourrierContent letter(SendCourrierContentLetter letter) {
    this.letter = letter;
    return this;
  }

   /**
   * Get letter
   * @return letter
  **/
  @Schema(description = "")
  public SendCourrierContentLetter getLetter() {
    return letter;
  }

  public void setLetter(SendCourrierContentLetter letter) {
    this.letter = letter;
  }

  public SendCourrierContent photo(SendCourrierContentPhoto photo) {
    this.photo = photo;
    return this;
  }

   /**
   * Get photo
   * @return photo
  **/
  @Schema(description = "")
  public SendCourrierContentPhoto getPhoto() {
    return photo;
  }

  public void setPhoto(SendCourrierContentPhoto photo) {
    this.photo = photo;
  }

  public SendCourrierContent card(SendCourrierContentCard card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @Schema(description = "")
  public SendCourrierContentCard getCard() {
    return card;
  }

  public void setCard(SendCourrierContentCard card) {
    this.card = card;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendCourrierContent sendCourrierContent = (SendCourrierContent) o;
    return Objects.equals(this.letter, sendCourrierContent.letter) &&
        Objects.equals(this.photo, sendCourrierContent.photo) &&
        Objects.equals(this.card, sendCourrierContent.card);
  }

  @Override
  public int hashCode() {
    return Objects.hash(letter, photo, card);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendCourrierContent {\n");
    
    sb.append("    letter: ").append(toIndentedString(letter)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
