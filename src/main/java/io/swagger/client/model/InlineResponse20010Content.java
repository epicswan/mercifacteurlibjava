/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * object avec, pour chaque pays demandé, le montant de l&#x27;affranchissement et la zone géographique
 */
@Schema(description = "object avec, pour chaque pays demandé, le montant de l'affranchissement et la zone géographique")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class InlineResponse20010Content {
  @SerializedName("photoHt")
  private String photoHt = null;

  @SerializedName("lettreHt")
  private String lettreHt = null;

  @SerializedName("carteHt")
  private String carteHt = null;

  @SerializedName("totalContentHt")
  private String totalContentHt = null;

  public InlineResponse20010Content photoHt(String photoHt) {
    this.photoHt = photoHt;
    return this;
  }

   /**
   * montant HT des photos
   * @return photoHt
  **/
  @Schema(description = "montant HT des photos")
  public String getPhotoHt() {
    return photoHt;
  }

  public void setPhotoHt(String photoHt) {
    this.photoHt = photoHt;
  }

  public InlineResponse20010Content lettreHt(String lettreHt) {
    this.lettreHt = lettreHt;
    return this;
  }

   /**
   * montant HT des pages de lettres
   * @return lettreHt
  **/
  @Schema(description = "montant HT des pages de lettres")
  public String getLettreHt() {
    return lettreHt;
  }

  public void setLettreHt(String lettreHt) {
    this.lettreHt = lettreHt;
  }

  public InlineResponse20010Content carteHt(String carteHt) {
    this.carteHt = carteHt;
    return this;
  }

   /**
   * montant HT de la carte
   * @return carteHt
  **/
  @Schema(description = "montant HT de la carte")
  public String getCarteHt() {
    return carteHt;
  }

  public void setCarteHt(String carteHt) {
    this.carteHt = carteHt;
  }

  public InlineResponse20010Content totalContentHt(String totalContentHt) {
    this.totalContentHt = totalContentHt;
    return this;
  }

   /**
   * montant HT du contenu du courrier
   * @return totalContentHt
  **/
  @Schema(description = "montant HT du contenu du courrier")
  public String getTotalContentHt() {
    return totalContentHt;
  }

  public void setTotalContentHt(String totalContentHt) {
    this.totalContentHt = totalContentHt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20010Content inlineResponse20010Content = (InlineResponse20010Content) o;
    return Objects.equals(this.photoHt, inlineResponse20010Content.photoHt) &&
        Objects.equals(this.lettreHt, inlineResponse20010Content.lettreHt) &&
        Objects.equals(this.carteHt, inlineResponse20010Content.carteHt) &&
        Objects.equals(this.totalContentHt, inlineResponse20010Content.totalContentHt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(photoHt, lettreHt, carteHt, totalContentHt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20010Content {\n");
    
    sb.append("    photoHt: ").append(toIndentedString(photoHt)).append("\n");
    sb.append("    lettreHt: ").append(toIndentedString(lettreHt)).append("\n");
    sb.append("    carteHt: ").append(toIndentedString(carteHt)).append("\n");
    sb.append("    totalContentHt: ").append(toIndentedString(totalContentHt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
