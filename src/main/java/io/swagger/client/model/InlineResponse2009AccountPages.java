/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Nombre de pages envoyées dans le mois
 */
@Schema(description = "Nombre de pages envoyées dans le mois")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-11-30T14:41:58.166575150Z[GMT]")

public class InlineResponse2009AccountPages {
  @SerializedName("thisMonth")
  private Integer thisMonth = null;

  @SerializedName("maxMonth")
  private Integer maxMonth = null;

  public InlineResponse2009AccountPages thisMonth(Integer thisMonth) {
    this.thisMonth = thisMonth;
    return this;
  }

   /**
   * Nombre de pages envoyées ce mois-ci.
   * @return thisMonth
  **/
  @Schema(description = "Nombre de pages envoyées ce mois-ci.")
  public Integer getThisMonth() {
    return thisMonth;
  }

  public void setThisMonth(Integer thisMonth) {
    this.thisMonth = thisMonth;
  }

  public InlineResponse2009AccountPages maxMonth(Integer maxMonth) {
    this.maxMonth = maxMonth;
    return this;
  }

   /**
   * Nombre maximum de pages que vous pouvez envoyer ce mois-ci.
   * @return maxMonth
  **/
  @Schema(description = "Nombre maximum de pages que vous pouvez envoyer ce mois-ci.")
  public Integer getMaxMonth() {
    return maxMonth;
  }

  public void setMaxMonth(Integer maxMonth) {
    this.maxMonth = maxMonth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2009AccountPages inlineResponse2009AccountPages = (InlineResponse2009AccountPages) o;
    return Objects.equals(this.thisMonth, inlineResponse2009AccountPages.thisMonth) &&
        Objects.equals(this.maxMonth, inlineResponse2009AccountPages.maxMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thisMonth, maxMonth);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2009AccountPages {\n");
    
    sb.append("    thisMonth: ").append(toIndentedString(thisMonth)).append("\n");
    sb.append("    maxMonth: ").append(toIndentedString(maxMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
