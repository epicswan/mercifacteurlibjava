/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * InlineResponse20017SuiviCourrier
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-11T10:32:30.069126169Z[GMT]")

public class InlineResponse20017SuiviCourrier {
  @SerializedName("dest")
  private String dest = null;

  @SerializedName("refCourrier")
  private String refCourrier = null;

  @SerializedName("refTracking")
  private String refTracking = null;

  @SerializedName("modeEnvoi")
  private String modeEnvoi = null;

  @SerializedName("lastState")
  private String lastState = null;

  @SerializedName("historique")
  private String historique = null;

  @SerializedName("pnd")
  private String pnd = null;

  @SerializedName("are_base64_jpeg")
  private String areBase64Jpeg = null;

  public InlineResponse20017SuiviCourrier dest(String dest) {
    this.dest = dest;
    return this;
  }

   /**
   * Nom et/ou société du destinataire
   * @return dest
  **/
  @Schema(description = "Nom et/ou société du destinataire")
  public String getDest() {
    return dest;
  }

  public void setDest(String dest) {
    this.dest = dest;
  }

  public InlineResponse20017SuiviCourrier refCourrier(String refCourrier) {
    this.refCourrier = refCourrier;
    return this;
  }

   /**
   * Référence Merci facteur du courrier
   * @return refCourrier
  **/
  @Schema(description = "Référence Merci facteur du courrier")
  public String getRefCourrier() {
    return refCourrier;
  }

  public void setRefCourrier(String refCourrier) {
    this.refCourrier = refCourrier;
  }

  public InlineResponse20017SuiviCourrier refTracking(String refTracking) {
    this.refTracking = refTracking;
    return this;
  }

   /**
   * Référence de suivi postal
   * @return refTracking
  **/
  @Schema(description = "Référence de suivi postal")
  public String getRefTracking() {
    return refTracking;
  }

  public void setRefTracking(String refTracking) {
    this.refTracking = refTracking;
  }

  public InlineResponse20017SuiviCourrier modeEnvoi(String modeEnvoi) {
    this.modeEnvoi = modeEnvoi;
    return this;
  }

   /**
   * Mode d&#x27;envoi du courrier (lrar, lrare, suivi ou normal)
   * @return modeEnvoi
  **/
  @Schema(description = "Mode d'envoi du courrier (lrar, lrare, suivi ou normal)")
  public String getModeEnvoi() {
    return modeEnvoi;
  }

  public void setModeEnvoi(String modeEnvoi) {
    this.modeEnvoi = modeEnvoi;
  }

  public InlineResponse20017SuiviCourrier lastState(String lastState) {
    this.lastState = lastState;
    return this;
  }

   /**
   * Dernier état connu de l&#x27;acheminement
   * @return lastState
  **/
  @Schema(description = "Dernier état connu de l'acheminement")
  public String getLastState() {
    return lastState;
  }

  public void setLastState(String lastState) {
    this.lastState = lastState;
  }

  public InlineResponse20017SuiviCourrier historique(String historique) {
    this.historique = historique;
    return this;
  }

   /**
   * Historique complet de l&#x27;acheminement
   * @return historique
  **/
  @Schema(description = "Historique complet de l'acheminement")
  public String getHistorique() {
    return historique;
  }

  public void setHistorique(String historique) {
    this.historique = historique;
  }

  public InlineResponse20017SuiviCourrier pnd(String pnd) {
    this.pnd = pnd;
    return this;
  }

   /**
   * 1 en cas de pli non distribuable, sinon 0. Est égale à null si le courrier n&#x27;a pas de suivi.
   * @return pnd
  **/
  @Schema(description = "1 en cas de pli non distribuable, sinon 0. Est égale à null si le courrier n'a pas de suivi.")
  public String getPnd() {
    return pnd;
  }

  public void setPnd(String pnd) {
    this.pnd = pnd;
  }

  public InlineResponse20017SuiviCourrier areBase64Jpeg(String areBase64Jpeg) {
    this.areBase64Jpeg = areBase64Jpeg;
    return this;
  }

   /**
   * Si vous avez envyé ce courrier en lrare, \&quot;pending\&quot; si l&#x27;accusé de réception n&#x27;est pas encore disponible, ou la base64 de l&#x27;AR numérisé (format jpeg) si il est disponible. Est égale à null le mode d&#x27;envoi du courrier n&#x27;est pas lrare.
   * @return areBase64Jpeg
  **/
  @Schema(description = "Si vous avez envyé ce courrier en lrare, \"pending\" si l'accusé de réception n'est pas encore disponible, ou la base64 de l'AR numérisé (format jpeg) si il est disponible. Est égale à null le mode d'envoi du courrier n'est pas lrare.")
  public String getAreBase64Jpeg() {
    return areBase64Jpeg;
  }

  public void setAreBase64Jpeg(String areBase64Jpeg) {
    this.areBase64Jpeg = areBase64Jpeg;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20017SuiviCourrier inlineResponse20017SuiviCourrier = (InlineResponse20017SuiviCourrier) o;
    return Objects.equals(this.dest, inlineResponse20017SuiviCourrier.dest) &&
        Objects.equals(this.refCourrier, inlineResponse20017SuiviCourrier.refCourrier) &&
        Objects.equals(this.refTracking, inlineResponse20017SuiviCourrier.refTracking) &&
        Objects.equals(this.modeEnvoi, inlineResponse20017SuiviCourrier.modeEnvoi) &&
        Objects.equals(this.lastState, inlineResponse20017SuiviCourrier.lastState) &&
        Objects.equals(this.historique, inlineResponse20017SuiviCourrier.historique) &&
        Objects.equals(this.pnd, inlineResponse20017SuiviCourrier.pnd) &&
        Objects.equals(this.areBase64Jpeg, inlineResponse20017SuiviCourrier.areBase64Jpeg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dest, refCourrier, refTracking, modeEnvoi, lastState, historique, pnd, areBase64Jpeg);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20017SuiviCourrier {\n");
    
    sb.append("    dest: ").append(toIndentedString(dest)).append("\n");
    sb.append("    refCourrier: ").append(toIndentedString(refCourrier)).append("\n");
    sb.append("    refTracking: ").append(toIndentedString(refTracking)).append("\n");
    sb.append("    modeEnvoi: ").append(toIndentedString(modeEnvoi)).append("\n");
    sb.append("    lastState: ").append(toIndentedString(lastState)).append("\n");
    sb.append("    historique: ").append(toIndentedString(historique)).append("\n");
    sb.append("    pnd: ").append(toIndentedString(pnd)).append("\n");
    sb.append("    areBase64Jpeg: ").append(toIndentedString(areBase64Jpeg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
