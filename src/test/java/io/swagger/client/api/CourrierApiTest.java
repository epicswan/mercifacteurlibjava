/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AdressSendCourrier;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.SendCourrierAnonymize;
import io.swagger.client.model.SendCourrierContent;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CourrierApi
 */
@Ignore
public class CourrierApiTest {

    private final CourrierApi api = new CourrierApi();

    /**
     * Annuler un envoi et son contenu
     *
     * Attention, opération irrémédiable. Selon le statut actuel des courriers, une demande d&#x27;annulation d&#x27;envoi pourra être rejetée immédiatement, rejetée après un certain délai, rejetée partiellement (annulation de l&#x27;envoi mais facturation partiellement annulée), ou acceptée intégralement (annulation de l&#x27;envoi et annulation intégrale de la facturation de cet envoi).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteEnvoiTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        Integer idEnvoi = null;
        InlineResponse2002 response = api.deleteEnvoi(wwServiceId, wwAccessToken, idEnvoi);

        // TODO: test validations
    }
    /**
     * Lister les courriers d&#x27;un envoi en particulier
     *
     * Cette opération entre dans le détail des informations d&#x27;un envoi précis. Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEnvoiTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        Integer idEnvoi = null;
        InlineResponse20012 response = api.getEnvoi(wwServiceId, wwAccessToken, idEnvoi);

        // TODO: test validations
    }
    /**
     * Lister les derniers évènements sur vos courriers
     *
     * Cette opération vous fourni l&#x27;historique des derniers évènements qui ont été executés en relation avec vos courriers. Si vous avez plus de 100 évènements sur la période, le résultat sera paginé.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLastEventsTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        Integer nbHeures = null;
        Integer page = null;
        InlineResponse20013 response = api.getLastEvents(wwServiceId, wwAccessToken, nbHeures, page);

        // TODO: test validations
    }
    /**
     * Obtenir le montant d&#x27;un ou plusieurs courriers (non nécessaire à l&#x27;envoi)
     *
     * Vous permet d&#x27;avoir le montant de l&#x27;affranchissement et du contenu d&#x27;un courrier en fonction de son contenu, de son mode d&#x27;envoi et de sa destination. Vous n&#x27;avez pas besoin d&#x27;utiliser cette fonction pour envoyer un courrier, mais vous pouvez l&#x27;utiliser si vous avez besoin de cette information avant d&#x27;envoyer un courrier (par exemple pour des raisons de facturation). Le montant retourné est un montant HT. La partie \&quot;affranchissement\&quot; n&#x27;est pas soumise à la TVA.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPostagePriceTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        List<String> modeEnvoi = null;
        List<String> cardFormat = null;
        List<String> cardPapier = null;
        List<String> cardCoin = null;
        Integer letterPageNumber = null;
        Integer photoNumber = null;
        List<String> paysDestinataire = null;
        List<Integer> idDestinataire = null;
        String letterPrintSides = null;
        InlineResponse20010 response = api.getPostagePrice(wwServiceId, wwAccessToken, modeEnvoi, cardFormat, cardPapier, cardCoin, letterPageNumber, photoNumber, paysDestinataire, idDestinataire, letterPrintSides);

        // TODO: test validations
    }
    /**
     * Obtenir les documents preuves d&#x27;un courrier (preuve de dépôt, preuve de réception, preuve de télechargement, etc.)
     *
     * Cela vous permet de récepérer les fichiers de preuves de vos courriers. Uniquement possible pour les courriers envoyés en Suivi, Recommandés avec avis de réception, ou Recommandé électroniques. Vous pourrez récupérer les preuves de dépôt (pour les suivi, les recommandés et les recommandés électroniques), les avis de réception (pour les recommandés avec avis de réception numérisé et les recommandés électropniques), ainsi que les preuves de télechargements (pour les recommandés électroniques). Les documents récupérés sont au format PDF ou JPEG.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProofTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        String trackingNumber = null;
        String document = null;
        InlineResponse20018 response = api.getProof(wwServiceId, wwAccessToken, trackingNumber, document);

        // TODO: test validations
    }
    /**
     * Obtenir le suivi et l&#x27;état des courriers d&#x27;un envoi
     *
     * Cette opération vous permet d&#x27;obtenir à n&#x27;importe quel moment l&#x27;état de courriers qui composent un envoi. Cet état correspond à l&#x27;état de l&#x27;impression du courrier jusqu&#x27;à sa remise à La Poste, et dans le cas des envois en LRAR ou en SUIVI, également l&#x27;historique du suivi de l&#x27;acheminement des courriers de la prise en charge par La Poste jusqu&#x27;à la distribution au destinataire.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSuiviEnvoiTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        Integer idEnvoi = null;
        InlineResponse20017 response = api.getSuiviEnvoi(wwServiceId, wwAccessToken, idEnvoi);

        // TODO: test validations
    }
    /**
     * Lister les 50 derniers envois d&#x27;un utilisateur
     *
     * Cette opération liste les envois, sans entrer dans le détail de chaque envoi.Un envoi peut etre composé de plusieurs destinataires (une lettre identique envoyée a des destinataires différents). Un envoi peut donc contenir plusieurs courriers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listEnvoisTest() throws Exception {
        String wwServiceId = null;
        String wwAccessToken = null;
        Integer idUser = null;
        InlineResponse20011 response = api.listEnvois(wwServiceId, wwAccessToken, idUser);

        // TODO: test validations
    }
    /**
     * Valider l&#x27;envoi d&#x27;un courrier
     *
     * ATTENTION, cette opération génère un courrier qui sera débité de votre compte, imprimé et posté. Pour effectuer vos tests d&#x27;intégration, n&#x27;hésitez pas à contacter notre service client pour ouvrir un compte \&quot;Sandbox\&quot;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendCourrierTest() throws Exception {
        Integer idUser = null;
        String modeEnvoi = null;
        AdressSendCourrier adress = null;
        String dateEnvoi = null;
        String designation = null;
        SendCourrierAnonymize anonymize = null;
        SendCourrierContent content = null;
        String wwServiceId = null;
        String wwAccessToken = null;
        InlineResponse2009 response = api.sendCourrier(idUser, modeEnvoi, adress, dateEnvoi, designation, anonymize, content, wwServiceId, wwAccessToken);

        // TODO: test validations
    }
    /**
     * Charger des fichiers dans un token pour les envoyer dans un courrier (facultatif) - uniquement disponible pour l&#x27;envoi de photos actuellement
     *
     * Vous pouvez charger des fichiers (photos) dans un Token avec /uploadFile. Utile si vous envoyez plusieurs fois le même contenu, ou si vous envoyez beaucoup de fichiers (surtout en base64). A la première utilisation, un token est créé et vous est retourné. Le Token peut être ensuite utilisé pour plusieurs envois.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws Exception {
        Integer idUser = null;
        String token = null;
        String product = null;
        String type = null;
        String file = null;
        String wwServiceId = null;
        String wwAccessToken = null;
        InlineResponse2008 response = api.uploadFile(idUser, token, product, type, file, wwServiceId, wwAccessToken);

        // TODO: test validations
    }
}
