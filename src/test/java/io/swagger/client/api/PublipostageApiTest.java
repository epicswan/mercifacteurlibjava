/*
 * Merci facteur API
 * Merci facteur PRO vous permet d'envoyer des courriers depuis votre applicatif via son API.     Types de courriers disponibles :   - Lettre de une ou plusieurs pages.  - Carte postale avec ou sans enveloppe  - Carte pliée  - Carte géante  - Carte non pliée  - Photos sur papier brillant    Modes d'envois disponibles :   - Envoi normal (lettre verte)  - Lettre suivie  - Recommandé avec avis de réception      Au sujet des webhooks : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md#webhooks)     Librairie PHP et exemples d'intégration : [`https://github.com/MerciFacteur/Merci-facteur-API`](https://github.com/MerciFacteur/Merci-facteur-API)    Infos générales sur l'API : [`https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md`](https://github.com/MerciFacteur/Merci-facteur-API/blob/master/README.md)    Plus d'informations sur [`https://www.merci-facteur.com/pro`](https://www.merci-facteur.com/pro)    N'hésitez pas à nous contacter via [`https://www.merci-facteur.com/pro/contact.php`](https://www.merci-facteur.com/pro/contact.php)
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.SendCourrierAnonymize;
import io.swagger.client.model.SourcePublipostageSource;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PublipostageApi
 */
@Ignore
public class PublipostageApiTest {

    private final PublipostageApi api = new PublipostageApi();

    /**
     * Envoi de la source de données du publipostage
     *
     * Validation de l&#x27;envoi d&#x27;un publipostage. Cela enclenche la fusion des données, la mise en production, l&#x27;impression et l&#x27;envoi de l&#x27;ensemble des lettres du publipostage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendPublipostageTest() throws Exception {
        Integer idEnvoi = null;
        Integer idExp = null;
        String jsonExp = null;
        String modeEnvoi = null;
        SendCourrierAnonymize anonymize = null;
        String wwServiceId = null;
        String wwAccessToken = null;
        InlineResponse2009 response = api.sendPublipostage(idEnvoi, idExp, jsonExp, modeEnvoi, anonymize, wwServiceId, wwAccessToken);

        // TODO: test validations
    }
    /**
     * Envoi de la source de données du publipostage
     *
     * La source de donnée contient les informations de vos destinataires. Elle peut être au format CSV/TXT (; entre les champs, et saut de ligne entre les lignes, la première ligne doit contenir les champs de fusion), ou au format json (de la forme [{\&quot;prenom\&quot;:\&quot;Jean-Marc\&quot;, \&quot;ville\&quot;:\&quot;Paris\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;},{\&quot;prenom\&quot;:\&quot;Julie\&quot;, \&quot;ville\&quot;:\&quot;Lyon\&quot;, \&quot;champ_de_fusion\&quot;:\&quot;valeur\&quot;}]). Votre fichier source doit au minimum contenir les champs de fusion suivants : \&quot;nom\&quot; ou \&quot;societe\&quot;, \&quot;cp\&quot;, \&quot;ville\&quot;, \&quot;pays\&quot;. Dans le cas d&#x27;un fichier CSV ou TXT, la premi&amp;egrave;re ligne doit &amp;ecirc;tre : civilite;nom;prenom;societe;adresse1;adresse2;adresse3;cp;ville;pays
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sourcePublipostageTest() throws Exception {
        Integer idUser = null;
        Object templateValidation = null;
        SourcePublipostageSource source = null;
        String wwServiceId = null;
        String wwAccessToken = null;
        InlineResponse20015 response = api.sourcePublipostage(idUser, templateValidation, source, wwServiceId, wwAccessToken);

        // TODO: test validations
    }
    /**
     * Envoi du template de la lettre à envoyer en nombre
     *
     * Le template doit être un fichier au format DOCX, il peut contenir des zones de remplacement (ou champs de fusion) qui seront remplacés par des données contenues dans la source de données. Les champs de fusion dans le template doivent être de la forme ${prenom} (avec uniquement des lettres, chiffres et le caractère _).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void templatePublipostageTest() throws Exception {
        String typeTemplate = null;
        String template = null;
        String wwServiceId = null;
        String wwAccessToken = null;
        InlineResponse20014 response = api.templatePublipostage(typeTemplate, template, wwServiceId, wwAccessToken);

        // TODO: test validations
    }
}
